# build-wine-proton.yml
name: Build Proton WOW64 for Termux

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

env:
  BUILD_DIR: "/tmp/build_wine"

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 安装构建依赖
      run: |
        sudo apt update
        sudo apt --fix-broken install -y
        sudo apt install -y \
          debootstrap \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          automake \
          libtool \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          vulkan-tools \
          libvulkan1 \
          mesa-vulkan-drivers \
          mingw-w64 \
          gettext \
          libgettextpo-dev \
          locales \
          language-pack-zh-hans \
          binutils

    - name: 安装多媒体和音频依赖
      run: |
        sudo apt install -y libunwind-dev
        sudo apt install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpg123-dev \
          libopenal-dev

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 检查系统信息
      run: |
        echo "系统架构信息:"
        uname -a
        echo "构建系统类型:"
        gcc -dumpmachine

    - name: 构建 Proton WOW64 版本 (修复配置问题)
      run: |
        set -e
        
        echo "开始构建 Proton WOW64 版本..."
        
        # 设置中文构建环境
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8
        export LANGUAGE=zh_CN:zh:en_US:en
        
        # 清理并创建构建目录
        rm -rf $BUILD_DIR/proton
        mkdir -p $BUILD_DIR/proton
        cd $BUILD_DIR/proton
        
                # 克隆 Proton 源码
        git clone https://github.com/ValveSoftware/wine
        cd wine
        
        # 切换到 Proton 10.0 分支
        git checkout proton_10.0
        
        # 修复 Termux 路径问题
        echo "修复 Termux 路径问题..."
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g' || true
        
        # 生成 configure 脚本
        echo "生成 configure 脚本..."
        ./autogen.sh
        
        # 配置 Wine - 修复配置问题
        mkdir -p build64
        cd build64
        
        # 获取构建系统类型
        BUILD_SYSTEM=$(gcc -dumpmachine)
        echo "构建系统类型: $BUILD_SYSTEM"
        
        ../configure \
          --build=$BUILD_SYSTEM \
          --host=$BUILD_SYSTEM \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install-proton \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland \
          CFLAGS="-Os -s" \
          CXXFLAGS="-Os -s"
        
        # 构建并安装
        echo "开始编译..."
        make -j2
        make install
        
        # 优化：strip 二进制文件
        echo "正在 strip 二进制文件以减小大小..."
        find /tmp/wine-install-proton -type f -name "*.so" -exec strip --strip-unneeded {} \; 2>/dev/null || true
        find /tmp/wine-install-proton -type f -executable -exec strip --strip-all {} \; 2>/dev/null || true
        
        # 删除不必要的文件
        echo "删除不必要的文件..."
        rm -rf /tmp/wine-install-proton/include 2>/dev/null || true
        rm -rf /tmp/wine-install-proton/share/man 2>/dev/null || true
        rm -rf /tmp/wine-install-proton/share/doc 2>/dev/null || true
        find /tmp/wine-install-proton -name "*.a" -delete 2>/dev/null || true
        find /tmp/wine-install-proton -name "*.la" -delete 2>/dev/null || true
        
        cd ../..
        
        # 获取版本信息
        VERSION_PROTON="10.0"
        COMMIT_HASH=$(cd wine && git log -1 --format="%h" 2>/dev/null || echo "unknown")
        PROTON_VERSION="${VERSION_PROTON}-${COMMIT_HASH}"
        echo "PROTON_VERSION=$PROTON_VERSION" >> $GITHUB_ENV
        
        # 检查安装后的大小
        echo "安装目录大小:"
        du -sh /tmp/wine-install-proton || true
        
        # 打包
        cd $GITHUB_WORKSPACE
        mkdir -p build-output
        tar -czf build-output/wine-proton-wow64-$PROTON_VERSION.tar.gz -C /tmp/wine-install-proton .
        
        echo "构建输出大小:"
        ls -lh build-output/wine-proton-wow64-$PROTON_VERSION.tar.gz || true
        
        echo "Proton WOW64 构建完成: wine-proton-wow64-$PROTON_VERSION.tar.gz"

    - name: 检查构建输出
      run: |
        echo "检查构建输出..."
        cd build-output
        ls -la
        echo "文件列表（前50个）:"
        tar -tzf wine-proton-wow64-$PROTON_VERSION.tar.gz | head -50

    - name: 为 Termux 准备安装包
      run: |
        cd build-output
        
        PROTON_FILE=$(ls wine-proton-wow64-*.tar.gz | head -1)
        if [ -z "$PROTON_FILE" ]; then
          echo "错误: 找不到 Proton 构建文件!"
          ls -la
          exit 1
        fi
        
        echo "使用构建文件: $PROTON_FILE"
        
        mkdir -p /tmp/wine-termux
        tar -xzf "$PROTON_FILE" -C /tmp/wine-termux
        
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/bin
        
        cp -r /tmp/wine-termux/* wine-package/opt/wine/
        
        # 进一步优化大小
        find wine-package/opt/wine -name "*.a" -delete 2>/dev/null || true
        find wine-package/opt/wine -name "*.la" -delete 2>/dev/null || true
        rm -rf wine-package/opt/wine/include 2>/dev/null || true
        
        # 创建包装脚本
        cat > wine-package/bin/wine << 'EOF'
        #!/bin/bash
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export HOME="$HOME"
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export TEMP="$TMPDIR"
        export TMP="$TMPDIR"
        mkdir -p "$TMPDIR" 2>/dev/null
        export WINEPREFIX="${WINEPREFIX:-$HOME/.wine}"
        mkdir -p "$WINEPREFIX" 2>/dev/null
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$LD_LIBRARY_PATH"
        export LANG="zh_CN.UTF-8"
        export LC_ALL="zh_CN.UTF-8"
        export WINELANG="zh_CN"
        exec "$TERMUX_PREFIX/opt/wine/bin/wine" "$@"
        EOF
        
        chmod +x wine-package/bin/wine
        
        for bin in wineserver winecfg; do
          cat > wine-package/bin/$bin << EOF
        #!/bin/bash
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export TMPDIR="\$TERMUX_PREFIX/tmp"
        export LD_LIBRARY_PATH="\$TERMUX_PREFIX/opt/wine/lib:\$TERMUX_PREFIX/opt/wine/lib64:\$TERMUX_PREFIX/lib:\$LD_LIBRARY_PATH"
        export LANG="zh_CN.UTF-8"
        export LC_ALL="zh_CN.UTF-8"
        export WINELANG="zh_CN"
        exec "\$TERMUX_PREFIX/opt/wine/bin/$bin" "\$@"
        EOF
          chmod +x wine-package/bin/$bin
        done

    - name: 创建安装脚本
      run: |
        cd build-output
        
        cat > wine-package/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "=========================================="
        echo "   Wine Proton WOW64 for Termux 安装脚本"
        echo "=========================================="
        
        TERMUX_PREFIX="/data/data/com.termux/files/usr"
        INSTALL_DIR="$TERMUX_PREFIX/opt/wine"
        BIN_DIR="$TERMUX_PREFIX/bin"
        
        if [ ! -d "$TERMUX_PREFIX" ]; then
            echo "错误: 这似乎不是 Termux 环境!"
            exit 1
        fi
        
        echo "创建目录..."
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$BIN_DIR"
        mkdir -p "$TERMUX_PREFIX/tmp"
        mkdir -p "$HOME/.wine"
        
        echo "安装 Wine 文件..."
        cp -r opt/wine/* "$INSTALL_DIR"/
        
        echo "安装启动脚本..."
        cp bin/wine "$BIN_DIR"/
        cp bin/wineserver "$BIN_DIR"/
        cp bin/winecfg "$BIN_DIR"/
        
        chmod +x "$BIN_DIR"/wine
        chmod +x "$BIN_DIR"/wineserver
        chmod +x "$BIN_DIR"/winecfg
        
        echo ""
        echo "=========================================="
        echo "   Wine Proton WOW64 安装完成!"
        echo "=========================================="
        echo ""
        echo "使用说明:"
        echo "1. 初始化 Wine: wine wineboot"
        echo "2. 配置 Wine: winecfg"
        echo "3. 安装音频支持: pkg install pulseaudio"
        echo ""
        echo "注意: 这是优化大小的版本，已移除调试符号。"
        EOF
        
        chmod +x wine-package/install.sh

    - name: 创建打包文件
      run: |
        cd build-output
        
        PROTON_FILE=$(ls wine-proton-wow64-*.tar.gz | head -1)
        PROTON_VERSION=$(echo "$PROTON_FILE" | sed 's/wine-proton-wow64-//' | sed 's/.tar.gz//')
        
        echo "PROTON_VERSION=$PROTON_VERSION" >> $GITHUB_ENV
        
        tar -czf wine-proton-wow64-termux-$PROTON_VERSION.tar.gz wine-package/
        
        echo "打包完成，文件大小:"
        ls -lh *.tar.gz

    - name: 设置 Release 标签
      run: |
        CURRENT_DATE=$(date +%Y%m%d)
        echo "RELEASE_TAG=proton-wow64-$CURRENT_DATE" >> $GITHUB_ENV
        echo "Release 标签设置为: $RELEASE_TAG"

    - name: 上传所有构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-proton-wow64-builds
        path: |
          build-output/wine-*.tar.gz
        retention-days: 7

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Wine Proton WOW64 Build ${{ env.RELEASE_TAG }}
        files: |
          build-output/wine-*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息
      run: |
        echo "✅ Wine Proton WOW64 构建完成"
        echo ""
        echo "构建的版本: $PROTON_VERSION"
        echo "Release 标签: $RELEASE_TAG"