# build-wine-lite.yml
name: Build LiteWine Esync WOW64 for Termux

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  VERSION: "9.2-lite"

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 安装最小化构建依赖
      run: |
        sudo apt update
        sudo apt install -y \
          git wget xz-utils bubblewrap \
          gcc-multilib g++-multilib \
          mingw-w64 \
          autoconf flex bison gettext \
          libx11-dev libxext-dev libxi-dev \
          libfreetype6-dev libfontconfig1-dev \
          libasound2-dev libpulse-dev \
          libvulkan-dev mesa-vulkan-drivers \
          locales language-pack-zh-hans

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8
    - name: 安装多媒体和音频依赖
      run: |
        sudo apt install -y libunwind-dev
        sudo apt install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpg123-dev \
          libopenal-dev
    - name: 克隆 Wine 源码
      run: |
        git clone --depth=1 --branch wine-9.2 https://gitlab.winehq.org/wine/wine.git

    - name: 下载并应用 staging 补丁
      run: |
        cd wine
        wget -O wine-staging-9.2.tar.gz https://github.com/wine-staging/wine-staging/archive/refs/tags/v9.2.tar.gz
        tar -xzf wine-staging-9.2.tar.gz
        cd wine-staging-9.2/staging
        chmod +x patchinstall.py
        ./patchinstall.py --all --destdir=../../

    - name: 应用必要修复补丁
      run: |
        cd wine
        # mfplat 修复
        wget -O fix_wine9.2_mfplat.sh https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh
        chmod +x fix_wine9.2_mfplat.sh
        ./fix_wine9.2_mfplat.sh
        
        # 返回值修复
        wget -O fix_return_value.patch https://github.com/afeimod/linbox/raw/main/path/fix_return_value.patch
        if patch -p1 -N < fix_return_value.patch; then
            echo "✅ 返回值修复补丁应用成功"
        fi

    - name: 修复 Termux 路径问题
      run: |
        cd wine
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +

    - name: 配置和构建优化版 WOW64 Wine
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        mkdir -p build-wow64
        cd build-wow64
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --disable-debug \
          --disable-winemsibuilder \
          --without-xinerama \
          --without-capi \
          --without-oss \
          --without-cups \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-sane \
          --without-piper \
          --without-pcap \
          --without-pcsclite \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland
        # 优化配置 - 禁用调试和不需要的功能

        # 使用优化编译
        make -j$(nproc) CFLAGS="-O2 -s" CXXFLAGS="-O2 -s"

    - name: 安装并精简 Wine
      run: |
        cd wine/build-wow64
        make install
        
        # 精简安装目录
        cd /tmp/wine-install
        
        # 移除调试符号和不需要的文件
        find . -name "*.a" -delete
        find . -name "*.la" -delete
        find . -name "*.def" -delete
        find bin -type f -exec strip --strip-all {} \; 2>/dev/null || true
        find lib -name "*.so" -exec strip --strip-unneeded {} \; 2>/dev/null || true
        find lib64 -name "*.so" -exec strip --strip-unneeded {} \; 2>/dev/null || true
        
        # 移除不需要的目录
        rm -rf share/man share/doc share/aclocal include
        
        echo "精简后大小:"
        du -sh /tmp/wine-install

    - name: 准备最小化打包
      run: |
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/share/fonts
        
        echo "复制精简后的 Wine 文件..."
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        echo "下载必需字体..."
        cd wine-package/share/fonts
        wget -q https://github.com/adobe-fonts/source-han-sans/raw/release/OTF/SourceHanSansSC-Regular.otf || echo "字体下载失败，继续..."
        cd ../../..

    - name: 创建打包文件
      run: |
        tar -czf wine-${{ env.VERSION }}-wow64-esync-termux.tar.gz wine-package/
        echo "打包完成:"
        ls -lh wine-*.tar.gz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.VERSION }}-wow64-esync-termux
        path: wine-${{ env.VERSION }}-wow64-esync-termux.tar.gz

    - name: 创建 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Wine ${{ env.VERSION }} (WOW64 with Esync for Termux)
        body: |
          LiteWine WOW64 with Esync for Termux
          
          版本: ${{ env.VERSION }}
          架构: x86_64 WOW64
          环境: Termux
          
          修复内容:
          - ✅ Wine 9.2 mfplat 修复
          - ✅ 返回值修复
          - ✅ Esync 修复
          - ✅ Termux 路径修复
          
          安装说明:
          1. 解压到 Termux 的 `/usr` 目录
          2. 添加 `/opt/wine/bin` 到 PATH 环境变量
        files: wine-${{ env.VERSION }}-wow64-esync-termux.tar.gz
        draft: false
        prerelease: false

    - name: 输出版本信息
      run: |
        echo "✅ Wine WOW64 with Esync 构建完成"
        echo "版本号: $VERSION"
        echo "架构: x86_64 WOW64"
        echo "环境: Termux"
        echo "应用修复:"
        echo "✓ Wine 9.2 mfplat 修复"
        echo "✓ 返回值修复"
        echo "✓ Esync 修复"
        echo "✓ Termux 路径修复"