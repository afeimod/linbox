# build-wine-lite.yml
name: Build AllWine Esync WOW64 for Termux

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本 (分支、标签或提交哈希)'
        required: true
        default: 'wine-9.2'
        type: string
      wine_staging_version:
        description: 'Wine Staging 版本 (可选，留空则自动匹配)'
        required: false
        type: string

permissions:
  contents: write

env:
  VERSION_PREFIX: "full"

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 设置 Wine 版本
      id: set_version
      run: |
        # 设置 Wine 版本
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
          echo "WINE_STAGING_VERSION=${{ github.event.inputs.wine_staging_version }}" >> $GITHUB_ENV
        else
          # 默认版本
          echo "WINE_VERSION=wine-9.2" >> $GITHUB_ENV
          echo "WINE_STAGING_VERSION=" >> $GITHUB_ENV
        fi
        
        # 如果没有指定 staging 版本，则自动匹配
        if [ -z "$WINE_STAGING_VERSION" ]; then
          # 从 Wine 版本中提取数字部分
          if [[ "$WINE_VERSION" =~ wine-([0-9]+\.[0-9]+) ]]; then
            WINE_STAGING_VERSION="v${BASH_REMATCH[1]}"
          else
            WINE_STAGING_VERSION="master"
          fi
          echo "WINE_STAGING_VERSION=$WINE_STAGING_VERSION" >> $GITHUB_ENV
        fi
        
        # 设置构建版本名称
        BUILD_DATE=$(date +%Y%m%d)
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        echo "FULL_VERSION=${WINE_VERSION#wine-}-${VERSION_PREFIX}" >> $GITHUB_ENV
        
        echo "使用的 Wine 版本: $WINE_VERSION"
        echo "使用的 Staging 版本: $WINE_STAGING_VERSION"
        echo "构建日期: $BUILD_DATE"
        echo "完整版本: $FULL_VERSION"

    - name: 安装构建依赖
      run: |
        sudo apt update
        sudo apt --fix-broken install -y
        sudo apt install -y \
          debootstrap \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          vulkan-tools \
          libvulkan1 \
          mesa-vulkan-drivers \
          mingw-w64 \
          gettext \
          libgettextpo-dev \
          locales \
          language-pack-zh-hans

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 安装多媒体和音频依赖
      run: |
        sudo apt install -y libunwind-dev
        sudo apt install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpg123-dev \
          libopenal-dev

    - name: 克隆指定版本的 Wine 源码
      run: |
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        echo "正在检出 Wine 版本: $WINE_VERSION"
        git checkout $WINE_VERSION
        
        # 获取详细的版本信息
        WINE_COMMIT_HASH=$(git rev-parse --short HEAD)
        WINE_DESCRIBE=$(git describe --tags --always 2>/dev/null || echo "custom-$WINE_COMMIT_HASH")
        echo "WINE_COMMIT_HASH=$WINE_COMMIT_HASH" >> $GITHUB_ENV
        echo "WINE_DESCRIBE=$WINE_DESCRIBE" >> $GITHUB_ENV
        echo "Wine 提交哈希: $WINE_COMMIT_HASH"
        echo "Wine 描述: $WINE_DESCRIBE"

    - name: 下载并应用指定版本的 staging 补丁
      run: |
        cd wine
        echo "下载 Wine Staging 版本: $WINE_STAGING_VERSION"
        
        # 尝试从 release 标签下载
        if wget -O wine-staging.tar.gz "https://github.com/wine-staging/wine-staging/archive/refs/tags/$WINE_STAGING_VERSION.tar.gz"; then
          echo "✅ 从标签下载 Staging 成功"
        elif wget -O wine-staging.tar.gz "https://github.com/wine-staging/wine-staging/archive/refs/heads/$WINE_STAGING_VERSION.tar.gz"; then
          echo "✅ 从分支下载 Staging 成功"
        else
          # 如果指定版本下载失败，尝试主分支
          echo "⚠️ 指定版本下载失败，尝试主分支"
          wget -O wine-staging.tar.gz "https://github.com/wine-staging/wine-staging/archive/refs/heads/master.tar.gz"
          echo "WINE_STAGING_VERSION=master" >> $GITHUB_ENV
        fi
        
        tar -xzf wine-staging.tar.gz
        cd wine-staging-*/staging
        chmod +x patchinstall.py
        ./patchinstall.py --all --destdir=../../ || echo "⚠️ 部分补丁应用失败，继续构建..."

    - name: 应用必要修复补丁
      run: |
        cd wine
        # 提取 Wine 版本号
        WINE_BASE_VERSION=${WINE_VERSION#wine-}
        echo "Wine 基础版本: $WINE_BASE_VERSION"
    
        # 将版本号转换为可比较的数字格式（如 9.2 -> 902, 9.10 -> 910）
        if [[ "$WINE_BASE_VERSION" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            VERSION_NUM=$((MAJOR * 100 + MINOR))
            echo "版本数字: $VERSION_NUM"
        else
            # 如果不是标准版本号格式（如main、master等），视为最新版本
            echo "非标准版本号，视为最新版本"
            VERSION_NUM=9999
        fi
    
        # mfplat 修复 - 根据版本选择不同的修复方式
        if [ $VERSION_NUM -ge 900 ] && [ $VERSION_NUM -le 905 ]; then
            # Wine 9.0 - 9.5 使用 fix_wine9.2_mfplat.sh
            echo "🔧 检测到 Wine 9.0-9.5 版本，使用 9.2 mfplat 修复"
            if wget -O fix_wine_mfplat.sh "https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh"; then
              chmod +x fix_wine_mfplat.sh
              ./fix_wine_mfplat.sh
              echo "✅ Wine $WINE_BASE_VERSION mfplat 修复应用成功"
            else
              echo "⚠️ Wine 9.2 mfplat 修复脚本下载失败，跳过"
            fi
        elif [ $VERSION_NUM -ge 906 ] || [ "$WINE_VERSION" = "main" ] || [ "$WINE_VERSION" = "master" ]; then
            # Wine 9.6+ 或 main/master 分支使用 patch 方式
            echo "🔧 检测到 Wine 9.6+ 或最新版本，使用 dxgi manager2 补丁"
            if wget -O wine_do_not_create_dxgi_manager2.patch "https://github.com/afeimod/linbox/raw/main/path/wine_do_not_create_dxgi_manager2.patch"; then
              if patch -p1 -N < wine_do_not_create_dxgi_manager2.patch; then
                echo "✅ dxgi manager2 补丁应用成功"
              else
                echo "⚠️ dxgi manager2 补丁应用失败，跳过"
              fi
            else
              echo "⚠️ dxgi manager2 补丁下载失败，跳过"
            fi
        else
            echo "ℹ️  Wine 版本 $WINE_BASE_VERSION 不在特定修复范围内，跳过 mfplat 修复"
        fi
    
        # 返回值修复 - 通用补丁（保持原样）
        if wget -O fix_return_value.patch "https://github.com/afeimod/linbox/raw/main/path/fix_return_value.patch"; then
          if patch -p1 -N < fix_return_value.patch; then
            echo "✅ 返回值修复补丁应用成功"
          else
            echo "⚠️ 返回值修复补丁应用失败，跳过"
          fi
        else
          echo "⚠️ 未找到返回值修复补丁，跳过"
        fi

    - name: 修复 Termux 路径问题
      run: |
        cd wine
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +

    - name: 配置和构建 WOW64 Wine
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        mkdir -p build-wow64
        cd build-wow64
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --disable-debug \
          --disable-winemsibuilder \
          --without-xinerama \
          --without-capi \
          --without-oss \
          --without-cups \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-sane \
          --without-piper \
          --without-pcap \
          --without-pcsclite \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland

        # 正常编译，不进行优化精简
        make -j$(nproc)
        make install

    - name: 准备完整打包
      run: |
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/share/fonts
        
        echo "复制完整的 Wine 文件..."
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        echo "下载必需字体..."
        cd wine-package/share/fonts
        wget -q https://github.com/adobe-fonts/source-han-sans/raw/release/OTF/SourceHanSansSC-Regular.otf || echo "字体下载失败，继续..."
        cd ../../..

        echo "完整构建大小:"
        du -sh wine-package/

    - name: 创建打包文件
      run: |
        tar -czf wine-${{ env.FULL_VERSION }}-${{ env.BUILD_DATE }}-wow64-esync-termux.tar.gz wine-package/
        echo "打包完成:"
        ls -lh wine-*.tar.gz

    - name: 检查打包文件是否存在
      run: |
        echo "检查打包文件:"
        ls -la wine-*.tar.gz
        if [ ! -f "wine-${{ env.FULL_VERSION }}-${{ env.BUILD_DATE }}-wow64-esync-termux.tar.gz" ]; then
          echo "错误：打包文件不存在！"
          exit 1
        fi

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.WINE_VERSION }}-${{ env.BUILD_DATE }}-wow64-esync-termux
        path: wine-${{ env.WINE_VERSION }}-${{ env.BUILD_DATE }}-wow64-esync-termux.tar.gz

    - name: 创建发布标签
      id: create_tag
      run: |
        RELEASE_TAG="wine-${{ env.WINE_VERSION }}-${{ env.FULL_VERSION }}-${{ env.BUILD_DATE }}"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        echo "Release 标签: $RELEASE_TAG"

    - name: 创建 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Wine ${{ env.WINE_VERSION }} ${{ env.FULL_VERSION }} (WOW64 with Esync for Termux)
        body: |
          Full Wine WOW64 with Esync for Termux
          
          构建信息:
          - **Wine 版本**: ${{ env.WINE_VERSION }}
          - **Wine 描述**: ${{ env.WINE_DESCRIBE }}
          - **提交哈希**: ${{ env.WINE_COMMIT_HASH }}
          - **Staging 版本**: ${{ env.WINE_STAGING_VERSION }}
          - **构建日期**: ${{ env.BUILD_DATE }}
          - **完整版本**: ${{ env.FULL_VERSION }}
          
          架构: x86_64 WOW64
          环境: Termux
          
          修复内容:
          - ✅ Wine ${{ env.WINE_VERSION }} mfplat 修复
          - ✅ 返回值修复
          - ✅ Esync 修复
          - ✅ Termux 路径修复
          
          安装说明:
          1. 解压到 Termux 的根目录
          2. 添加 `/opt/wine/bin` 到 PATH 环境变量
        files: wine-${{ env.FULL_VERSION }}-${{ env.BUILD_DATE }}-wow64-esync-termux.tar.gz
        draft: false
        prerelease: false

    - name: 输出版本信息
      run: |
        echo "✅ Wine WOW64 with Esync 构建完成"
        echo "Wine 版本: ${{ env.WINE_VERSION }}"
        echo "Wine 描述: ${{ env.WINE_DESCRIBE }}"
        echo "提交哈希: ${{ env.WINE_COMMIT_HASH }}"
        echo "Staging 版本: ${{ env.WINE_STAGING_VERSION }}"
        echo "完整版本: ${{ env.FULL_VERSION }}"
        echo "构建日期: ${{ env.BUILD_DATE }}"
        echo "架构: x86_64 WOW64"
        echo "环境: Termux"
        echo "应用修复:"
        echo "✓ Wine ${{ env.WINE_VERSION }} mfplat 修复"
        echo "✓ 返回值修复"
        echo "✓ Esync 修复"
        echo "✓ Termux 路径修复"