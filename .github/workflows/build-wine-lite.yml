# build-wine-lite.yml
name: Build TestWine (True WOW64 for Termux with Vulkan and Full GStreamer)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (例如: 9.9, 9.21, 9.22)'
        required: true
        default: '9.21'
        type: string

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 设置版本变量
      run: |
        echo "WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
        echo "STAGING_VERSION=v${{ github.event.inputs.wine_version }}"
        echo "构建 Wine 版本: ${{ github.event.inputs.wine_version }}"
        echo "Staging 补丁版本: v${{ github.event.inputs.wine_version }}"

    - name: 安装构建依赖
      run: |
        sudo apt update
        # 修复损坏的依赖
        sudo apt --fix-broken install -y
        sudo apt install -y \
          git \
          wget \
          xz-utils \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          mingw-w64 \
          gettext \
          libgettextpo-dev \
          locales \
          language-pack-zh-hans

    - name: 安装多媒体和音频依赖
      run: |
        sudo apt install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpg123-dev \
          libopenal-dev

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 检查工作目录
      run: |
        echo "当前工作目录: $(pwd)"
        ls -la
        echo "构建版本: ${{ env.WINE_VERSION }}"
          
    - name: 克隆 Wine 源码
      run: |
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        git checkout wine-${{ env.WINE_VERSION }}
        
    - name: 下载并应用 staging 补丁
      run: |
        cd wine
        # 下载 staging 补丁集
        wget -O wine-staging-${{ env.WINE_VERSION }}.tar.gz https://github.com/wine-staging/wine-staging/archive/refs/tags/v${{ env.WINE_VERSION }}.tar.gz
        tar -xzf wine-staging-${{ env.WINE_VERSION }}.tar.gz
    
        # 应用 staging 补丁
        cd wine-staging-${{ env.WINE_VERSION }}/staging
        chmod +x patchinstall.py
        ./patchinstall.py --all --destdir=../../
    
        echo "✅ Staging 补丁应用完成"

    - name: 验证 staging 补丁应用
      run: |
        cd wine
        echo "检查 staging 补丁应用情况..."
        if [ -f "dlls/ntdll/unix/esync.c" ]; then
            echo "✅ esync 支持已通过 staging 补丁添加"
        else
            echo "❌ esync 支持未找到"
        fi

    - name: 根据版本选择修复方式
      run: |
        cd wine
        
        # 解析版本号进行比较
        VERSION_MAJOR=$(echo ${{ env.WINE_VERSION }} | cut -d. -f1)
        VERSION_MINOR=$(echo ${{ env.WINE_VERSION }} | cut -d. -f2)
        
        echo "Wine 版本: ${{ env.WINE_VERSION }}"
        echo "主版本: $VERSION_MAJOR, 次版本: $VERSION_MINOR"
        
        # 判断版本是否 >= 9.10
        if [ $VERSION_MAJOR -gt 9 ] || [ $VERSION_MAJOR -eq 9 -a $VERSION_MINOR -ge 10 ]; then
            echo "使用 9.10+ 版本的修复方式 (wine_do_not_create_dxgi_manager2.patch)"
            echo "PATCH_TYPE=wine_do_not_create_dxgi_manager2" >> $GITHUB_ENV
        else
            echo "使用 9.10 以下版本的修复方式 (fix_wine9.2_mfplat.sh)"
            echo "PATCH_TYPE=fix_wine9_2_mfplat" >> $GITHUB_ENV
        fi

    - name: 应用 9.10 以下版本修复
      if: env.PATCH_TYPE == 'fix_wine9_2_mfplat'
      run: |
        cd wine
        echo "下载并应用 fix_wine9.2_mfplat.sh..."
        wget -O fix_wine9.2_mfplat.sh https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh
        chmod +x fix_wine9.2_mfplat.sh
        ./fix_wine9.2_mfplat.sh
        echo "✅ 9.10 以下版本修复完成"

    - name: 应用 9.10 及以上版本修复
      if: env.PATCH_TYPE == 'wine_do_not_create_dxgi_manager2'
      run: |
        cd wine
        echo "下载并应用 wine_do_not_create_dxgi_manager2.patch..."
        wget https://github.com/afeimod/linbox/raw/main/path/wine_do_not_create_dxgi_manager2.patch
        
        # 检查目标文件是否存在
        if [ -f "dlls/mfplat/main.c" ]; then
            echo "找到目标文件 dlls/mfplat/main.c，准备应用补丁..."
            
            # 尝试应用补丁
            if patch -p1 < wine_do_not_create_dxgi_manager2.patch; then
                echo "✅ 补丁应用成功"
            else
                echo "❌ 补丁应用失败"
                exit 1
            fi
        else
            echo "❌ 错误：目标文件 dlls/mfplat/main.c 不存在"
            exit 1
        fi

    - name: 修复 Termux 路径问题
      run: |
        cd wine
        
        echo "修复 Termux 路径问题..."
        
        # 修改关键文件中的 /tmp 路径
        find . -name "file.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "loader.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "server.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        echo "路径修复完成"

    - name: 配置和构建真正的 WOW64 Wine（启用 Vulkan 和完整 GStreamer）
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建构建目录
        mkdir -p build-wow64
        cd build-wow64

        # 配置真正的 WOW64 Wine，启用 Vulkan 和完整 GStreamer 支持
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --enable-nls \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-debug \
          --disable-tests

        # 构建真正的 WOW64 Wine
        echo "开始构建支持 Vulkan 和完整 GStreamer 的 WOW64 Wine..."
        make -j$(nproc)

    - name: 安装 Wine 并获取版本信息
      run: |
        cd wine/build-wow64
        # 安装 WOW64 Wine
        make install

        # 使用输入版本号
        VERSION="${{ env.WINE_VERSION }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine 版本: $VERSION - 支持 Vulkan 和完整 GStreamer 的 WOW64 构建"

    - name: 验证 Vulkan 和 GStreamer 支持
      run: |
        echo "检查 Vulkan 支持..."
        if [ -f "/tmp/wine-install/bin/wine" ]; then
          echo "Wine 二进制文件存在"
        else
          echo "错误: Wine 二进制文件不存在"
          exit 1
        fi
        
        echo "检查 Vulkan 相关文件..."
        find /tmp/wine-install -name "*vulkan*" | head -10
        echo ""
        echo "检查 winevulkan.dll..."
        find /tmp/wine-install -name "winevulkan.dll*" | head -5
        echo ""
        echo "检查 GStreamer 支持..."
        find /tmp/wine-install -name "*gst*" | head -10

    - name: 准备打包
      run: |
        # 创建打包目录
        mkdir -p wine-package/opt/wine
        
        # 复制 Wine 安装文件
        echo "复制 Wine 文件..."
        cp -r /tmp/wine-install/* wine-package/opt/wine/

    - name: 创建打包文件
      run: |
        echo "最终文件结构:"
        find wine-package -type f | sort
        echo ""
        echo "检查 Vulkan 相关文件:"
        find wine-package -name "*vulkan*" | sort
        echo ""
        echo "检查 GStreamer 相关文件:"
        find wine-package -name "*gst*" | sort
        
        # 打包
        tar -czf wine-${{ env.WINE_VERSION }}-true-wow64-bin-gstreamer-termux.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh wine-*.tar.gz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.WINE_VERSION }}-true-wow64-bin-gstreamer-termux
        path: wine-${{ env.WINE_VERSION }}-true-wow64-bin-gstreamer-termux.tar.gz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.WINE_VERSION }}-true-wow64-gstreamer
        name: Wine ${{ env.WINE_VERSION }} (True WOW64 with Vulkan & GStreamer for Termux)
        body: |
          # Wine ${{ env.WINE_VERSION }} - True WOW64 with Vulkan & GStreamer for Termux
          
          ## 版本信息
          - **Wine 版本**: ${{ env.WINE_VERSION }}
          - **架构**: True WOW64 (同时支持 32 位和 64 位 Windows 应用程序)
          - **平台**: Termux (Android)
          - **图形 API**: Vulkan 支持已启用
          - **多媒体**: 完整 GStreamer 支持（包含 FFmpeg 插件）
          
          ## 特性
          ✓ 真正的 WOW64 架构
          ✓ 同时支持 32 位和 64 位 Windows 应用程序
          ✓ Vulkan 图形 API 支持
          ✓ 完整的 GStreamer 支持
          ✓ 中文环境支持
          ✓ 应用了关键补丁提升兼容性

          ## 构建信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
          - 工作流: ${{ github.workflow }}
        files: wine-${{ env.WINE_VERSION }}-true-wow64-bin-gstreamer-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息
      run: |
        echo "✅ True WOW64 Wine with Vulkan and Full GStreamer 构建完成"
        echo "版本号: ${{ env.WINE_VERSION }}"
        echo "架构: x86_64 True WOW64"
        echo "环境: Termux"
        echo "图形 API: Vulkan 支持已启用"
        echo "多媒体: 完整 GStreamer 支持"
        echo "修复方式: ${{ env.PATCH_TYPE }}"
        echo ""
        echo "修复的问题:"
        echo "✓ 无法运行 EXE 文件"
        echo "✓ 中文环境支持"
        echo "✓ Vulkan 支持"
        echo "✓ 完整的 GStreamer 支持"
        echo "✓ 应用了关键补丁，提升兼容性"