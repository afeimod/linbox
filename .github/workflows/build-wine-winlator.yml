# build-wine-winlator.yml
name: Build WinlatorWine (True WOW64 for Termux with Vulkan and Full GStreamer)

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出源码和补丁
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: 启用多架构支持
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update

    - name: 修复包管理器
      run: |
        sudo apt-get update
        sudo apt-get install -f -y
        sudo apt-get autoremove -y

    - name: 安装基本依赖
      run: |
        sudo apt-get install -y \
          build-essential \
          git \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          meson \
          ninja-build \
          autoconf \
          wget \
          xz-utils \
          gettext \
          fontconfig \
          libfreetype6 \
          libfreetype6-dev

    - name: 安装构建依赖
      run: |
        sudo apt update
        # 先修复损坏的依赖
        sudo apt --fix-broken install -y
        sudo apt install -y \
          debootstrap \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          vulkan-tools \
          libvulkan1 \
          mesa-vulkan-drivers \
          mingw-w64

    - name: 安装完整的 GStreamer 和 FFmpeg 依赖
      run: |
        # 先安装 libunwind-dev 解决依赖问题
        sudo apt install -y libunwind-dev
        
        # 安装完整的 GStreamer 核心和插件
        sudo apt install -y \
          gstreamer1.0-tools \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav \
          gstreamer1.0-gl \
          gstreamer1.0-pulseaudio \
          gstreamer1.0-alsa \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-good1.0-dev \
          libgstreamer-plugins-bad1.0-dev

        # 安装 FFmpeg 开发库
        sudo apt install -y \
          ffmpeg \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libavfilter-dev \
          libswscale-dev \
          libswresample-dev \
          libpostproc-dev \
          libavdevice-dev

        # 安装多媒体和音频依赖
        sudo apt install -y \
          libmpg123-dev \
          libopenal-dev \
          libvorbis-dev \
          libflac-dev \
          libopus-dev \
          libmad0-dev \
          libtwolame-dev \
          libshout3-dev \
          libsoup2.4-dev \
          libcurl4-openssl-dev

    - name: 克隆 Wine 源码
      run: |
        git clone https://github.com/brunodev85/wine-9.2-custom.git
        cd wine-9.2-custom
        #git checkout wine-9.16

    - name: 配置和构建真正的 WOW64 Wine（优化配置）
      run: |
        cd wine-9.2-custom
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建构建目录
        mkdir -p build-wow64
        cd build-wow64

        # 优化配置 - 移除可能导致问题的选项
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          CFLAGS="-O2 -g -fno-stack-protector" \
          CXXFLAGS="-O2 -g -fno-stack-protector"

        # 构建真正的 WOW64 Wine
        echo "开始构建支持 Vulkan 和完整 GStreamer 的 WOW64 Wine..."
        make -j$(nproc)

    - name: 修复安装目录权限
      run: |
        sudo mkdir -p /tmp/wine-install
        sudo chown -R $USER:$USER /tmp/wine-install
        chmod 755 -R /tmp/wine-install

    - name: 安装 Wine 并获取版本信息
      run: |
        cd wine-9.2-custom/build-wow64
        # 安装 WOW64 Wine
        make install
        
        # 获取版本信息
        cd ..
        if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            VERSION=$(git describe --tags --abbrev=0)
        elif [ -f VERSION ]; then
            VERSION=$(cat VERSION)
        else
            VERSION="9.2-custom-$(date +%Y%m%d)"
        fi
        
        VERSION=$(echo "$VERSION" | tr -d '\n' | sed 's/[^a-zA-Z0-9._-]//g')
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine 版本: $VERSION"

    - name: 创建修复运行问题的脚本
      run: |
        cd /tmp/wine-install
        
        # 创建环境修复脚本
        cat > fix-runtime.sh << 'EOF'
        #!/bin/bash
        echo "修复 Wine 运行时问题..."
        
        # 设置正确的环境变量
        export WINEARCH=win64
        export WINEPREFIX="$HOME/.wine"
        export WINEDEBUG="-all"
        export LD_LIBRARY_PATH="/data/data/com.termux/files/usr/lib:${LD_LIBRARY_PATH}"
        
        # 创建必要的目录
        mkdir -p "$HOME/.wine"
        mkdir -p "/data/data/com.termux/files/usr/tmp"
        
        echo "环境修复完成"
        echo "使用: source fix-runtime.sh 然后运行 wine your_app.exe"
        EOF
        
        # 创建 EXE 运行测试脚本
        cat > test-run-exe.sh << 'EOF'
        #!/bin/bash
        echo "测试 Wine 运行 EXE 文件的能力..."
        
        # 设置环境
        source ./fix-runtime.sh 2>/dev/null || true
        
        # 创建一个简单的 C 程序并编译为 EXE（用于测试）
        if command -v x86_64-w64-mingw32-gcc >/dev/null 2>&1; then
            echo "编译测试程序..."
            cat > test_hello.c << 'HELLO_EOF'
            #include <stdio.h>
            #include <windows.h>
            int main() {
                printf("Hello from Wine on Termux!\\n");
                MessageBoxA(NULL, "Wine is working!", "Success", MB_OK);
                return 0;
            }
            HELLO_EOF
            x86_64-w64-mingw32-gcc test_hello.c -o test_hello.exe -mwindows
            echo "运行测试程序..."
            ./bin/wine test_hello.exe
        else
            echo "mingw-w64 未安装，无法编译测试程序"
            echo "请手动测试: ./bin/wine your_app.exe"
        fi
        EOF
        
        # 创建调试脚本
        cat > debug-wine.sh << 'EOF'
        #!/bin/bash
        echo "Wine 调试模式..."
        
        export WINEDEBUG="+loaddll,+module,+seh"
        export WINEARCH=win64
        export WINEPREFIX="$HOME/.wine"
        
        echo "调试环境已设置"
        echo "现在运行: ./bin/wine your_app.exe"
        echo "要查看详细日志，使用: WINEDEBUG=+all ./bin/wine your_app.exe"
        EOF
        
        chmod +x fix-runtime.sh test-run-exe.sh debug-wine.sh

    - name: 创建安装和配置脚本
      run: |
        cd /tmp/wine-install
        echo "创建安装脚本..."
        cat > install.sh << 'EOF'
        #!/bin/bash
        echo "正在安装 Wine for Termux..."
        echo "版本: $VERSION"
        echo "架构: True WOW64 with Vulkan & GStreamer"

        # 检查 Termux 环境
        if [ ! -d "/data/data/com.termux/files/usr" ]; then
            echo "错误: 这不是 Termux 环境!"
            exit 1
        fi

        # 备份原有文件
        echo "备份原有 Wine 文件..."
        BACKUP_DIR="/data/data/com.termux/files/usr/wine-backup-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        cp -r /data/data/com.termux/files/usr/bin/wine* "$BACKUP_DIR/" 2>/dev/null || true
        cp -r /data/data/com.termux/files/usr/lib/wine "$BACKUP_DIR/" 2>/dev/null || true

        # 复制文件
        echo "复制文件到系统目录..."
        cp -r bin/* /data/data/com.termux/files/usr/bin/ 2>/dev/null || true
        cp -r lib/* /data/data/com.termux/files/usr/lib/ 2>/dev/null || true
        cp -r share/* /data/data/com.termux/files/usr/share/ 2>/dev/null || true

        # 设置权限
        chmod +x /data/data/com.termux/files/usr/bin/wine* 2>/dev/null || true
        
        # 复制修复脚本
        cp fix-runtime.sh test-run-exe.sh debug-wine.sh /data/data/com.termux/files/usr/bin/ 2>/dev/null || true

        echo "安装完成!"
        echo ""
        echo "重要: 运行以下命令初始化 Wine 环境:"
        echo "source /data/data/com.termux/files/usr/bin/fix-runtime.sh"
        echo "wine wineboot"
        echo ""
        echo "测试 EXE 运行:"
        echo "/data/data/com.termux/files/usr/bin/test-run-exe.sh"
        echo ""
        echo "如果遇到问题，使用调试模式:"
        echo "/data/data/com.termux/files/usr/bin/debug-wine.sh"
        EOF

        # 创建测试脚本
        cat > test-vulkan.sh << 'EOF'
        #!/bin/bash
        echo "测试 Vulkan 支持..."
        source ./fix-runtime.sh 2>/dev/null || true
        
        if [ -f "./bin/wine" ]; then
            echo "Wine 已安装"
            ./bin/wine --version
        else
            echo "Wine 未找到"
        fi

        echo "检查 Vulkan 驱动..."
        if [ -f "/system/vendor/lib64/hw/vulkan.$(getprop ro.hardware).so" ]; then
            echo "找到 Vulkan 驱动: vulkan.$(getprop ro.hardware).so"
        else
            echo "未找到 Vulkan 驱动，设备可能不支持 Vulkan"
        fi

        echo "测试完成"
        EOF

        cat > test-media.sh << 'EOF'
        #!/bin/bash
        echo "测试多媒体支持..."
        echo "检查 GStreamer 插件..."

        if command -v gst-inspect-1.0 >/dev/null 2>&1; then
            echo "GStreamer 已安装"
            gst-inspect-1.0 --version
            echo "可用的音频插件:"
            gst-inspect-1.0 | grep -E "(audio|mp3|aac|flac|ogg)" | head -10
        else
            echo "GStreamer 未安装"
        fi

        echo "测试完成"
        EOF

        # 设置脚本权限
        chmod +x install.sh
        chmod +x test-vulkan.sh
        chmod +x test-media.sh

        echo "脚本创建完成"

    - name: 验证安装目录内容
      run: |
        echo "验证安装目录内容..."
        if [ -d "/tmp/wine-install" ]; then
            echo "安装目录存在，内容:"
            find /tmp/wine-install -type f | head -20
            echo "目录结构:"
            tree -L 3 /tmp/wine-install || ls -la /tmp/wine-install/
            
            echo "检查关键文件:"
            find /tmp/wine-install -name "wine*" -type f | head -10
        else
            echo "错误: /tmp/wine-install 目录不存在!"
        fi

    - name: 创建打包文件
      run: |
        echo "创建打包文件..."
        cd /tmp
        
        if [ -z "$VERSION" ]; then
            VERSION="9.2-custom-$(date +%Y%m%d)"
        fi
        
        echo "使用版本号: $VERSION"
        
        if [ ! -d "wine-install" ]; then
            echo "错误: wine-install 目录不存在!"
            ls -la /tmp/
            exit 1
        fi
        
        echo "打包目录内容:"
        ls -la wine-install/
        
        tar -czf "wine-${VERSION}-true-wow64-vulkan-gstreamer-termux.tar.gz" wine-install/
        
        if [ $? -eq 0 ] && [ -f "wine-${VERSION}-true-wow64-vulkan-gstreamer-termux.tar.gz" ]; then
            echo "打包成功!"
            mv "wine-${VERSION}-true-wow64-vulkan-gstreamer-termux.tar.gz" $GITHUB_WORKSPACE/
            
            echo "打包文件信息:"
            cd $GITHUB_WORKSPACE
            ls -lh "wine-${VERSION}-true-wow64-vulkan-gstreamer-termux.tar.gz"
        else
            echo "打包失败!"
            ls -la /tmp/
            exit 1
        fi

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.VERSION }}-true-wow64-vulkan-gstreamer-termux
        path: wine-${{ env.VERSION }}-true-wow64-vulkan-gstreamer-termux.tar.gz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Wine ${{ env.VERSION }} (True WOW64 with Vulkan & GStreamer for Termux)
        files: wine-${{ env.VERSION }}-true-wow64-vulkan-gstreamer-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: 输出使用说明
      run: |
        echo "✅ True WOW64 Wine with Vulkan and Full GStreamer 构建完成"
        echo "版本号: $VERSION"
        echo ""
        echo "针对 EXE 运行问题的修复:"
        echo "✓ 优化了构建配置参数"
        echo "✓ 添加了运行时环境修复脚本"
        echo "✓ 添加了 EXE 运行测试脚本"
        echo "✓ 添加了调试模式脚本"
        echo ""
        echo "使用步骤:"
        echo "1. 解压: tar -xzf wine-$VERSION-*.tar.gz"
        echo "2. 进入: cd wine-install"
        echo "3. 安装: ./install.sh"
        echo "4. 设置环境: source /data/data/com.termux/files/usr/bin/fix-runtime.sh"
        echo "5. 初始化: wine wineboot"
        echo "6. 测试运行: test-run-exe.sh"
        echo ""
        echo "如果仍有问题:"
        echo "- 运行: debug-wine.sh 进入调试模式"
        echo "- 检查: WINEDEBUG=+all wine your_app.exe 查看详细日志"
        echo "- 确保: 设置了正确的 WINEPREFIX 和 WINEARCH"
        echo ""
        echo "重要环境变量:"
        echo "export WINEARCH=win64"
        echo "export WINEPREFIX=\"\$HOME/.wine\""
        echo "export WINEDEBUG=\"-all\"  # 禁用调试输出以获得更好性能"