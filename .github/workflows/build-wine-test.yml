# build-wine-test.yml
name: Build TestWine (True WOW64 for Termux with Bootstrap)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (例如: 9.9, 9.21, 9.22)'
        required: true
        default: '9.21'
        type: string
      use_bootstrap:
        description: '使用 Bootstrap 环境构建（减少内存占用）'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      WINE_VERSION: ${{ github.event.inputs.wine_version }}
      USE_BOOTSTRAP: ${{ github.event.inputs.use_bootstrap }}

    steps:
    - name: 检查输入参数
      run: |
        echo "Wine 版本: ${{ env.WINE_VERSION }}"
        echo "使用 Bootstrap: ${{ env.USE_BOOTSTRAP }}"

    - name: 安装基础依赖
      run: |
        sudo apt update
        sudo apt install -y \
          git wget xz-utils \
          autoconf flex bison \
          make cmake ninja-build \
          gcc g++ gcc-multilib g++-multilib \
          mingw-w64 \
          gettext libgettextpo-dev \
          locales language-pack-zh-hans \
          ccache

    - name: 设置中文环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 创建完整的 Bootstrap 环境
      if: env.USE_BOOTSTRAP == 'true'
      run: |
        echo "创建完整的 Bootstrap 环境..."
        sudo apt install -y debootstrap bubblewrap
        
        # 创建引导目录
        sudo mkdir -p /opt/chroots/ubuntu64_chroot
        
        # 创建完整的 Ubuntu 22.04 环境（非最小化）
        echo "创建完整的 Ubuntu 22.04 环境..."
        sudo debootstrap --arch=amd64 jammy /opt/chroots/ubuntu64_chroot http://archive.ubuntu.com/ubuntu/
        
        # 在引导环境中配置基本的 apt 源和更新
        echo "配置引导环境的软件源..."
        sudo chroot /opt/chroots/ubuntu64_chroot /bin/bash -c "
          # 添加 universe 和 multiverse 仓库
          echo 'deb http://archive.ubuntu.com/ubuntu jammy main universe multiverse' > /etc/apt/sources.list
          echo 'deb http://archive.ubuntu.com/ubuntu jammy-updates main universe multiverse' >> /etc/apt/sources.list
          echo 'deb http://archive.ubuntu.com/ubuntu jammy-security main universe multiverse' >> /etc/apt/sources.list
          
          # 更新软件包列表
          apt update
          
          # 安装基本系统工具
          apt install -y software-properties-common apt-utils
          
          # 更新整个系统
          apt upgrade -y
        "
        
        # 在引导环境中安装完整的构建工具链
        echo "在引导环境中安装完整的构建工具链..."
        sudo chroot /opt/chroots/ubuntu64_chroot /bin/bash -c "
          # 更新软件包列表
          apt update
          
          # 安装完整的开发工具链
          apt install -y \
            build-essential \
            gcc g++ gcc-multilib g++-multilib \
            mingw-w64 mingw-w64-tools \
            autoconf automake flex bison \
            libtool pkg-config \
            cmake ninja-build \
            meson nasm yasm \
            && echo '✅ 基础开发工具安装完成'
          
          # 安装 Wine 构建依赖
          apt install -y \
            libx11-dev libxext-dev libxi-dev \
            libxrandr-dev libxcursor-dev libxcomposite-dev \
            libxdamage-dev libxfixes-dev libxxf86vm-dev \
            libxrender-dev libxinerama-dev \
            libgl-dev libglu-dev libosmesa6-dev \
            libfreetype6-dev libfontconfig1-dev \
            libpcap-dev libdbus-1-dev libssl-dev \
            libasound2-dev libpulse-dev libudev-dev \
            libcups2-dev libjpeg-dev libpng-dev \
            libtiff-dev libxml2-dev libvulkan-dev \
            vulkan-tools libvulkan1 mesa-vulkan-drivers \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libmpg123-dev libopenal-dev \
            libsane-dev libcapi20-dev libgsm1-dev \
            liblcms2-dev libldap2-dev libmp3lame-dev \
            libopencl-dev libpcap-dev libva-dev \
            && echo '✅ Wine 依赖安装完成'
          
          # 安装语言和区域支持
          apt install -y \
            locales language-pack-zh-hans \
            gettext libgettextpo-dev \
            && echo '✅ 语言支持安装完成'
          
          # 清理缓存
          apt clean
          rm -rf /var/lib/apt/lists/*
          
          # 验证安装
          echo '=== 验证安装 ==='
          gcc --version
          g++ --version
          x86_64-w64-mingw32-gcc --version
          i686-w64-mingw32-gcc --version
          pkg-config --version
          echo '=== 验证完成 ==='
        "
        
        echo "✅ 完整的 Bootstrap 环境准备完成"

    - name: 克隆 Wine 源码
      run: |
        git clone https://github.com/wine-mirror/wine.git
        cd wine
        git checkout wine-${{ env.WINE_VERSION }}
        echo "Wine 源码版本: ${{ env.WINE_VERSION }}"

    - name: 下载并应用 Staging 补丁
      run: |
        cd wine
        # 下载 staging 补丁集
        wget -O wine-staging-${{ env.WINE_VERSION }}.tar.gz https://github.com/wine-staging/wine-staging/archive/refs/tags/v${{ env.WINE_VERSION }}.tar.gz
        tar -xzf wine-staging-${{ env.WINE_VERSION }}.tar.gz
        
        # 应用 staging 补丁
        cd wine-staging-${{ env.WINE_VERSION }}/staging
        chmod +x patchinstall.py
        ./patchinstall.py --all --destdir=../../
        echo "✅ Staging 补丁应用完成"

    - name: 应用 MF 兼容性补丁
      run: |
        cd wine
        
        # 解析版本号确定补丁类型
        VERSION_MAJOR=$(echo "${{ env.WINE_VERSION }}" | cut -d. -f1)
        VERSION_MINOR=$(echo "${{ env.WINE_VERSION }}" | cut -d. -f2)
        
        echo "Wine 版本: ${{ env.WINE_VERSION }}"
        echo "主版本: $VERSION_MAJOR, 次版本: $VERSION_MINOR"
        
        # 判断版本并应用相应补丁
        if [ $VERSION_MAJOR -gt 9 ] || [ $VERSION_MAJOR -eq 9 -a $VERSION_MINOR -ge 10 ]; then
            echo "应用 9.10+ 版本的 MF 修复补丁"
            wget https://github.com/afeimod/linbox/raw/main/path/wine_do_not_create_dxgi_manager2.patch
            if [ -f "dlls/mfplat/main.c" ]; then
                patch -p1 < wine_do_not_create_dxgi_manager2.patch && echo "✅ 补丁应用成功"
            else
                echo "⚠️ 目标文件不存在，跳过补丁"
            fi
        else
            echo "应用 9.10 以下版本的 MF 修复脚本"
            wget -O fix_wine9.2_mfplat.sh https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh
            chmod +x fix_wine9.2_mfplat.sh
            ./fix_wine9.2_mfplat.sh && echo "✅ 修复脚本执行完成"
        fi

    - name: 修复 Termux 路径问题
      run: |
        cd wine
        echo "修复 Termux 路径问题..."
        
        # 修改硬编码的 /tmp 路径为 Termux 路径
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | \
          xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g' || true
        
        # 修复关键文件中的路径
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec \
          sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} + || true
        
        echo "路径修复完成"

    - name: 配置 Wine 构建（Bootstrap 模式）
      if: env.USE_BOOTSTRAP == 'true'
      run: |
        cd wine
        mkdir -p build-wow64
        cd build-wow64
        
        echo "使用完整的 Bootstrap 环境配置 Wine..."
        
        # 使用 bubblewrap 在完整的 Bootstrap 环境中配置
        bwrap --ro-bind /opt/chroots/ubuntu64_chroot / \
              --dev /dev --ro-bind /sys /sys --proc /proc \
              --tmpfs /tmp --tmpfs /home --tmpfs /run \
              --bind $(pwd)/../.. $(pwd)/../.. \
              --setenv PATH "/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin" \
              --setenv PKG_CONFIG_PATH "/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" \
              ../configure \
                --enable-win64 \
                --enable-archs=i386,x86_64 \
                --prefix=/tmp/wine-install \
                --with-x \
                --with-vulkan \
                --with-alsa \
                --with-pulse \
                --with-freetype \
                --with-fontconfig \
                --with-gstreamer \
                --with-gettext \
                --enable-nls \
                --disable-winemenubuilder \
                --disable-win16 \
                --disable-tests \
                --without-dbus \
                --without-sane \
                --without-pcap \
                --without-pcsclite \
                --without-cups \
                --without-capi \
                --without-coreaudio \
                --without-gphoto \
                --without-osmesa \
                --without-oss \
                --without-udev \
                --without-unwind \
                --without-usb \
                --without-v4l2 \
                --without-wayland
        
        echo "✅ Bootstrap 模式配置完成"

    - name: 配置 Wine 构建（直接模式）
      if: env.USE_BOOTSTRAP == 'false'
      run: |
        cd wine
        mkdir -p build-wow64
        cd build-wow64
        
        # 直接配置（不使用 Bootstrap）
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --without-cups \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland
        
        echo "✅ 直接模式配置完成"

    - name: 编译 Wine
      run: |
        cd wine/build-wow64
        echo "开始编译 Wine..."
        
        # 使用多线程编译
        make -j$(nproc)
        echo "✅ 编译完成"

    - name: 安装 Wine
      run: |
        cd wine/build-wow64
        make install
        echo "✅ Wine 安装完成"
        
        # 显示安装文件大小
        echo "安装目录大小:"
        du -sh /tmp/wine-install/

    - name: 验证构建结果
      run: |
        echo "验证构建结果..."
        
        # 检查关键文件
        if [ -f "/tmp/wine-install/bin/wine" ]; then
            echo "✅ Wine 二进制文件存在"
            /tmp/wine-install/bin/wine --version || true
        else
            echo "❌ 错误: Wine 二进制文件不存在"
            exit 1
        fi
        
        # 检查 Vulkan 支持
        echo "Vulkan 支持检查:"
        find /tmp/wine-install -name "*vulkan*" | head -5 || echo "未找到 Vulkan 文件"
        
        # 检查 GStreamer 支持
        echo "GStreamer 支持检查:"
        find /tmp/wine-install -name "*gst*" | head -5 || echo "未找到 GStreamer 文件"
        
        # 检查 WoW64 支持
        echo "WoW64 支持检查:"
        find /tmp/wine-install -name "*wine*" -type f | grep -E "(bin|lib)" | head -10

    - name: 准备打包
      run: |
        # 创建打包目录结构
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/usr/local/bin
        
        # 复制 Wine 文件
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        # 创建启动脚本
        cat > wine-package/usr/local/bin/wine << 'EOF'
            #!/bin/bash
            export WINEPREFIX=${WINEPREFIX:-$HOME/.wine}
            export WINEARCH=${WINEARCH:-win64}
            /opt/wine/bin/wine "$@"
        EOF
        chmod +x wine-package/usr/local/bin/wine
        
        # 创建版本信息文件
        cat > wine-package/version-info.txt << EOF
            Wine Version: ${{ env.WINE_VERSION }}
            Build Date: $(date)
            Build Type: ${{ env.USE_BOOTSTRAP && 'Bootstrap (Full Ubuntu)' || 'Direct' }} Mode
            Architecture: True WOW64 (i386/x86_64)
            Platform: Termux
            Features: Vulkan, GStreamer, True WOW64
            Bootstrap Environment: Full Ubuntu 22.04 with all development tools
        EOF

    - name: 创建压缩包
      run: |
        # 确定构建类型标签
        if [ "${{ env.USE_BOOTSTRAP }}" = "true" ]; then
            BUILD_TYPE="bootstrap-full"
        else
            BUILD_TYPE="direct"
        fi
        
        # 创建压缩包
        tar -czf wine-${{ env.WINE_VERSION }}-wow64-$BUILD_TYPE-termux.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh wine-*.tar.gz
        echo ""
        echo "压缩包内容:"
        tar -tzf wine-${{ env.WINE_VERSION }}-wow64-$BUILD_TYPE-termux.tar.gz | head -20

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.WINE_VERSION }}-wow64-${{ env.USE_BOOTSTRAP && 'bootstrap-full' || 'direct' }}-termux
        path: wine-${{ env.WINE_VERSION }}-wow64-*-termux.tar.gz
        retention-days: 30

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: wine-${{ env.WINE_VERSION }}-wow64-${{ env.USE_BOOTSTRAP && 'bootstrap-full' || 'direct' }}
        name: Wine ${{ env.WINE_VERSION }} (WOW64 for Termux)
        body: |
          # Wine ${{ env.WINE_VERSION }} - True WOW64 for Termux
          
          ## 构建信息
          - **版本**: ${{ env.WINE_VERSION }}
          - **架构**: True WOW64 (同时支持 32/64 位)
          - **构建模式**: ${{ env.USE_BOOTSTRAP && 'Bootstrap (完整 Ubuntu 环境)' || 'Direct' }}
          - **平台**: Termux (Android)
          - **特性**: Vulkan, GStreamer, True WOW64
          
          ## 主要改进
          ✓ 真正的 WOW64 架构支持
          ✓ Vulkan 图形 API 支持
          ✓ GStreamer 多媒体支持  
          ✓ Termux 路径兼容性修复
          ✓ MF 兼容性补丁
          ✓ ${{ env.USE_BOOTSTRAP && '完整 Ubuntu Bootstrap 环境构建' || '直接构建' }}
          
          ## 使用说明
          1. 解压到 Termux 环境
          2. 添加 `/opt/wine/bin` 到 PATH
          3. 运行 `wine --version` 测试
          
          ## 构建详情
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
          - 工作流: ${{ github.workflow }}
        files: wine-${{ env.WINE_VERSION }}-wow64-*-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出构建摘要
      run: |
        echo "=== 构建摘要 ==="
        echo "✅ Wine 构建完成"
        echo "版本: ${{ env.WINE_VERSION }}"
        echo "架构: True WOW64 (i386/x86_64)"
        echo "构建模式: ${{ env.USE_BOOTSTRAP && 'Bootstrap（完整 Ubuntu 环境）' || 'Direct（直接）' }}"
        echo "平台: Termux"
        echo ""
        echo "包含特性:"
        echo "✓ Vulkan 图形支持"
        echo "✓ GStreamer 多媒体支持"
        echo "✓ Termux 路径兼容性"
        echo "✓ MF 兼容性修复"
        echo "✓ 完整开发工具链"
        echo ""
        echo "构建产物: wine-${{ env.WINE_VERSION }}-wow64-${{ env.USE_BOOTSTRAP && 'bootstrap-full' || 'direct' }}-termux.tar.gz"
        echo "================"