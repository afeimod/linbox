# build-wine-test.yml
name: Build Test1Wine (True WOW64 for Termux with Vulkan and Full GStreamer)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (例如: 9.9, 9.21, 9.22)'
        required: true
        default: '9.21'
        type: string

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  create-bootstrap:
    runs-on: ubuntu-24.04
    outputs:
      bootstrap-path: ${{ steps.set-bootstrap-path.outputs.path }}
    steps:
      - uses: actions/checkout@v3

      - name: 创建最小化 WoW64 引导环境
        run: |
          sudo apt update
          sudo apt install debootstrap perl -y
          # 如果仓库中有 bootstrap 脚本，使用它
          if [ -f "ubuntu_bootstrap_wow64.sh" ]; then
            chmod +x ubuntu_bootstrap_wow64.sh
            sudo ./ubuntu_bootstrap_wow64.sh
          else
            # 否则创建基本的多架构环境
            sudo mkdir -p /opt/chroots
            sudo debootstrap --arch=amd64 --variant=minbase jammy /opt/chroots/amd64 http://archive.ubuntu.com/ubuntu/
            sudo debootstrap --arch=i386 --variant=minbase jammy /opt/chroots/i386 http://archive.ubuntu.com/ubuntu/
          fi
          
          # 在引导环境中安装最小化构建依赖
          sudo chroot /opt/chroots/amd64 /bin/bash -c "
            apt update && \
            apt install -y \
              build-essential \
              gcc-multilib \
              g++-multilib \
              libc6-dev-i386 \
              linux-libc-dev \
              libx11-dev \
              libxext-dev \
              libfreetype6-dev \
              libfontconfig1-dev \
              libvulkan-dev \
              libgstreamer1.0-dev \
              libgstreamer-plugins-base1.0-dev \
              && apt clean
          "
          
          sudo chroot /opt/chroots/i386 /bin/bash -c "
            apt update && \
            apt install -y \
              build-essential \
              libc6-dev \
              linux-libc-dev \
              libx11-dev \
              libxext-dev \
              libfreetype6-dev \
              libfontconfig1-dev \
              && apt clean
          "

      - name: 打包引导环境（可选）
        run: |
          cd /opt
          sudo tar -I "xz -T0 -9" -cpf bootstraps_wow64.tar.xz chroots
          sudo chown $USER:$USER bootstraps_wow64.tar.xz
          sha256sum bootstraps_wow64.tar.xz

      - name: 上传引导环境产物
        uses: actions/upload-artifact@v4
        with:
          name: bootstraps_wow64
          path: /opt/bootstraps_wow64.tar.xz

      - name: 设置引导环境路径
        id: set-bootstrap-path
        run: echo "path=/opt/chroots" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-24.04
    needs: create-bootstrap
    
    steps:
    - name: 设置版本变量
      run: |
        echo "WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
        echo "STAGING_VERSION=v${{ github.event.inputs.wine_version }}"
        echo "构建 Wine 版本: ${{ github.event.inputs.wine_version }}"
        echo "Staging 补丁版本: v${{ github.event.inputs.wine_version }}"
        echo "Bootstrap 路径: ${{ needs.create-bootstrap.outputs.bootstrap-path }}"

    - name: 安装基本构建依赖
      run: |
        sudo apt update
        sudo apt install -y \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          make \
          cmake \
          ninja-build \
          gettext \
          libgettextpo-dev \
          locales \
          language-pack-zh-hans

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 克隆 Wine 源码
      run: |
        git clone https://github.com/wine-mirror/wine.git
        cd wine
        git checkout wine-${{ env.WINE_VERSION }}
        
    - name: 下载并应用 staging 补丁
      run: |
        cd wine
        # 下载 staging 补丁集
        wget -O wine-staging-${{ env.WINE_VERSION }}.tar.gz https://github.com/wine-staging/wine-staging/archive/refs/tags/v${{ env.WINE_VERSION }}.tar.gz
        tar -xzf wine-staging-${{ env.WINE_VERSION }}.tar.gz
    
        # 应用 staging 补丁 - 使用正确的路径
        cd wine-staging-${{ env.WINE_VERSION }}/staging
        chmod +x patchinstall.py
    
        # 应用所有补丁到 Wine 源码目录（上级的上级目录）
        ./patchinstall.py --all --destdir=../../
    
        echo "✅ Staging 补丁应用完成"

    - name: 验证 staging 补丁应用
      run: |
        cd wine
        echo "检查 staging 补丁应用情况..."
        if [ -f "dlls/ntdll/unix/esync.c" ]; then
            echo "✅ esync 支持已通过 staging 补丁添加"
        else
            echo "❌ esync 支持未找到"
        fi

    - name: 根据版本选择修复方式
      run: |
        cd wine
        
        # 解析版本号进行比较
        VERSION_MAJOR=$(echo ${{ env.WINE_VERSION }} | cut -d. -f1)
        VERSION_MINOR=$(echo ${{ env.WINE_VERSION }} | cut -d. -f2)
        
        echo "Wine 版本: ${{ env.WINE_VERSION }}"
        echo "主版本: $VERSION_MAJOR, 次版本: $VERSION_MINOR"
        
        # 判断版本是否 >= 9.10
        if [ $VERSION_MAJOR -gt 9 ] || [ $VERSION_MAJOR -eq 9 -a $VERSION_MINOR -ge 10 ]; then
            echo "使用 9.10+ 版本的修复方式 (wine_do_not_create_dxgi_manager2.patch)"
            echo "PATCH_TYPE=wine_do_not_create_dxgi_manager2" >> $GITHUB_ENV
        else
            echo "使用 9.10 以下版本的修复方式 (fix_wine9.2_mfplat.sh)"
            echo "PATCH_TYPE=fix_wine9_2_mfplat" >> $GITHUB_ENV
        fi

    - name: 应用 9.10 以下版本修复
      if: env.PATCH_TYPE == 'fix_wine9_2_mfplat'
      run: |
        cd wine
        echo "下载并应用 fix_wine9.2_mfplat.sh..."
        wget -O fix_wine9.2_mfplat.sh https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh
        chmod +x fix_wine9.2_mfplat.sh
        ./fix_wine9.2_mfplat.sh
        echo "✅ 9.10 以下版本修复完成"

    - name: 应用 9.10 及以上版本修复
      if: env.PATCH_TYPE == 'wine_do_not_create_dxgi_manager2'
      run: |
        cd wine
        echo "下载并应用 wine_do_not_create_dxgi_manager2.patch..."
        wget https://github.com/afeimod/linbox/raw/main/path/wine_do_not_create_dxgi_manager2.patch
        
        # 检查目标文件是否存在
        if [ -f "dlls/mfplat/main.c" ]; then
            echo "找到目标文件 dlls/mfplat/main.c，准备应用补丁..."
            
            # 尝试应用补丁
            if patch -p1 < wine_do_not_create_dxgi_manager2.patch; then
                echo "✅ 补丁应用成功"
            else
                echo "❌ 补丁应用失败"
                exit 1
            fi
        else
            echo "❌ 错误：目标文件 dlls/mfplat/main.c 不存在"
            exit 1
        fi

    - name: 彻底修复 Termux 路径问题
      run: |
        cd wine
        
        echo "彻底修复 Termux 路径问题..."
        
        # 修改所有硬编码的 /tmp 路径
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        
        # 修改 server 目录中的特定路径
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 修改其他关键文件
        find . -name "file.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "loader.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "server.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        echo "路径修复完成"

    - name: 配置和构建真正的 WOW64 Wine（使用最小化环境）
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建构建目录
        mkdir -p build-wow64
        cd build-wow64

        # 使用引导环境作为 sysroot 来构建最小化的 Wine
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-debug \
          --disable-tests \
          --without-piper \
          --without-xinerama \
          --without-cups \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland

        # 构建真正的 WOW64 Wine - 使用最小化依赖
        echo "开始构建最小化的 WOW64 Wine..."
        make -j$(nproc)

    - name: 安装 Wine 并获取版本信息
      run: |
        cd wine/build-wow64
        # 安装 WOW64 Wine
        make install

        # 使用输入版本号
        VERSION="${{ env.WINE_VERSION }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine 版本: $VERSION - 最小化 WOW64 构建"

    - name: 验证构建结果
      run: |
        echo "检查 Wine 二进制文件..."
        if [ -f "/tmp/wine-install/bin/wine" ]; then
          echo "✅ Wine 二进制文件存在"
          /tmp/wine-install/bin/wine --version || true
        else
          echo "❌ 错误: Wine 二进制文件不存在"
          exit 1
        fi
        
        echo "检查文件大小..."
        du -sh /tmp/wine-install/
        echo ""
        echo "检查 Vulkan 支持..."
        find /tmp/wine-install -name "*vulkan*" | head -5
        echo ""
        echo "检查 GStreamer 支持..."
        find /tmp/wine-install -name "*gst*" | head -5

    - name: 准备打包
      run: |
        # 创建打包目录
        mkdir -p wine-package/opt/wine
        
        # 复制 Wine 安装文件
        echo "复制 Wine 文件..."
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        # 创建启动脚本
        mkdir -p wine-package/usr/local/bin
        cat > wine-package/usr/local/bin/wine << 'EOF'
            #!/bin/bash
            export WINEPREFIX=\${WINEPREFIX:-\$HOME/.wine}
            export WINEARCH=\${WINEARCH:-win64}
            /opt/wine/bin/wine "\$@"
        EOF
        chmod +x wine-package/usr/local/bin/wine

    - name: 创建打包文件
      run: |
        echo "最终文件结构:"
        find wine-package -type f | sort
        echo ""
        echo "总大小:"
        du -sh wine-package/
        
        # 打包
        tar -czf wine-${{ env.WINE_VERSION }}-true-wow64-minimal-termux.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh wine-*.tar.gz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.WINE_VERSION }}-true-wow64-minimal-termux
        path: |
          wine-${{ env.WINE_VERSION }}-true-wow64-minimal-termux.tar.gz
          /opt/bootstraps_wow64.tar.xz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.WINE_VERSION }}-true-wow64-minimal
        name: Wine ${{ env.WINE_VERSION }} (Minimal True WOW64 for Termux)
        body: |
          # Wine ${{ env.WINE_VERSION }} - Minimal True WOW64 for Termux
          
          ## 版本信息
          - **Wine 版本**: ${{ env.WINE_VERSION }}
          - **架构**: True WOW64 (同时支持 32 位和 64 位 Windows 应用程序)
          - **平台**: Termux (Android)
          - **构建类型**: 最小化构建（使用引导环境）
          - **图形 API**: Vulkan 支持已启用
          - **多媒体**: GStreamer 支持
          
          ## 特性
          ✓ 真正的 WOW64 架构
          ✓ 同时支持 32 位和 64 位 Windows 应用程序
          ✓ Vulkan 图形 API 支持
          ✓ GStreamer 多媒体支持
          ✓ 中文环境支持
          ✓ 最小化构建，内存占用更低
          ✓ 应用了关键补丁提升兼容性

          ## 包含的文件
          - `wine-${{ env.WINE_VERSION }}-true-wow64-minimal-termux.tar.gz` - Wine 主程序
          - `bootstraps_wow64.tar.xz` - WoW64 引导环境

          ## 构建信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
          - 工作流: ${{ github.workflow }}
        files: |
          wine-${{ env.WINE_VERSION }}-true-wow64-minimal-termux.tar.gz
          bootstraps_wow64.tar.xz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息
      run: |
        echo "✅ Minimal True WOW64 Wine 构建完成"
        echo "版本号: ${{ env.WINE_VERSION }}"
        echo "架构: x86_64 True WOW64"
        echo "环境: Termux"
        echo "构建类型: 最小化构建"
        echo "修复方式: ${{ env.PATCH_TYPE }}"
        echo ""
        echo "优化特性:"
        echo "✓ 使用最小化引导环境构建"
        echo "✓ 减少不必要的依赖"
        echo "✓ 更小的内存占用"
        echo "✓ 保持 Vulkan 和 GStreamer 支持"
        echo "✓ 应用了关键补丁，提升兼容性"