# build-wine-test.yml
name: Build LiteWine (Lite WOW64 for Termux)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (例如: 9.9, 9.21, 9.22)'
        required: true
        default: '9.21'
        type: string

permissions:
  contents: write


jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      WINE_VERSION: ${{ github.event.inputs.wine_version }}

    steps:
    - name: 检查输入参数
      run: |
        echo "Wine 版本: ${{ env.WINE_VERSION }}"

    - name: 安装基础依赖
      run: |
        sudo apt update
        sudo apt install -y \
          git wget xz-utils \
          autoconf flex bison \
          make cmake ninja-build \
          gcc g++ gcc-multilib g++-multilib \
          mingw-w64 \
          gettext libgettextpo-dev \
          locales language-pack-zh-hans \
          ccache

    - name: 设置中文环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 克隆 Wine 源码
      run: |
        git clone https://github.com/wine-mirror/wine.git
        cd wine
        git checkout wine-${{ env.WINE_VERSION }}
        echo "Wine 源码版本: ${{ env.WINE_VERSION }}"

    - name: 下载并应用 Staging 补丁
      run: |
        cd wine
        # 下载 staging 补丁集
        wget -O wine-staging-${{ env.WINE_VERSION }}.tar.gz https://github.com/wine-staging/wine-staging/archive/refs/tags/v${{ env.WINE_VERSION }}.tar.gz
        tar -xzf wine-staging-${{ env.WINE_VERSION }}.tar.gz
        
        # 应用 staging 补丁
        cd wine-staging-${{ env.WINE_VERSION }}/staging
        chmod +x patchinstall.py
        ./patchinstall.py --all --destdir=../../
        echo "✅ Staging 补丁应用完成"

    - name: 应用 MF 兼容性补丁
      run: |
        cd wine
        
        # 解析版本号确定补丁类型
        VERSION_MAJOR=$(echo "${{ env.WINE_VERSION }}" | cut -d. -f1)
        VERSION_MINOR=$(echo "${{ env.WINE_VERSION }}" | cut -d. -f2)
        
        echo "Wine 版本: ${{ env.WINE_VERSION }}"
        echo "主版本: $VERSION_MAJOR, 次版本: $VERSION_MINOR"
        
        # 判断版本并应用相应补丁
        if [ $VERSION_MAJOR -gt 9 ] || [ $VERSION_MAJOR -eq 9 -a $VERSION_MINOR -ge 10 ]; then
            echo "应用 9.10+ 版本的 MF 修复补丁"
            wget https://github.com/afeimod/linbox/raw/main/path/wine_do_not_create_dxgi_manager2.patch
            if [ -f "dlls/mfplat/main.c" ]; then
                patch -p1 < wine_do_not_create_dxgi_manager2.patch && echo "✅ 补丁应用成功"
            else
                echo "⚠️ 目标文件不存在，跳过补丁"
            fi
        else
            echo "应用 9.10 以下版本的 MF 修复脚本"
            wget -O fix_wine9.2_mfplat.sh https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh
            chmod +x fix_wine9.2_mfplat.sh
            ./fix_wine9.2_mfplat.sh && echo "✅ 修复脚本执行完成"
        fi

    - name: 修复 Termux 路径问题
      run: |
        cd wine
        echo "彻底修复 Termux 路径问题..."
        
        # 修改所有硬编码的 /tmp 路径
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        
        # 修改 server 目录中的特定路径
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 修改其他关键文件
        find . -name "file.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "loader.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "server.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        echo "路径修复完成"

    - name: 配置 Wine 构建（直接模式 - WOW64）
      run: |
        cd wine
        
        # 安装宿主系统的必要依赖
        echo "安装宿主系统的必要依赖..."
        sudo apt update
        sudo apt install -y \
          libx11-dev libxext-dev libxi-dev \
          libxrandr-dev libxcursor-dev \
          libxrender-dev libxinerama-dev \
          x11proto-core-dev x11proto-xext-dev \
          libvulkan-dev mesa-vulkan-drivers \
          libasound2-dev libpulse-dev \
          libfreetype6-dev libfontconfig1-dev \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
          libjpeg-dev libpng-dev libtiff-dev \
          libxml2-dev libssl-dev \
          libudev-dev
        
        mkdir -p build-wow64
        cd build-wow64
        
        # 设置环境变量
        export CROSSCC="x86_64-w64-mingw32-gcc"
        export CROSSCXX="x86_64-w64-mingw32-g++"
        export CFLAGS="-march=x86-64 -msse3 -mfpmath=sse -O3 -ftree-vectorize -pipe"
        export CXXFLAGS="-march=x86-64 -msse3 -mfpmath=sse -O3 -ftree-vectorize -pipe"
        
        ../configure \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --without-cups \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland
        
        echo "✅ 直接模式 WOW64 配置完成"
        
        # 验证 Makefile
        if [ -f 'Makefile' ]; then
          echo '✅ Makefile 已生成'
        else
          echo '❌ Makefile 未生成，配置失败'
          exit 1
        fi

    - name: 编译 Wine（直接模式 - WOW64）
      run: |
        cd wine/build-wow64
        echo "开始编译 Wine WOW64..."
        make -j$(nproc)
        echo "✅ WOW64 编译完成"

    - name: 安装 Wine（直接模式 - WOW64）
      run: |
        cd wine/build-wow64
        make install
        echo "✅ Wine WOW64 安装完成"

    - name: 验证构建结果
      run: |
        echo "验证构建结果..."
        
        if [ -f "/tmp/wine-install/bin/wine" ]; then
            echo "✅ Wine 二进制文件存在"
            /tmp/wine-install/bin/wine --version || true
        else
            echo "❌ 错误: Wine 二进制文件不存在"
            exit 1
        fi
        
        # 检查关键组件
        echo "安装目录结构:"
        ls -la /tmp/wine-install/
        echo "bin 目录:"
        ls -la /tmp/wine-install/bin/
        echo "lib 目录:"
        ls -la /tmp/wine-install/lib/ | head -10

    - name: 准备打包
      run: |
        # 创建打包目录结构
        mkdir -p wine-package/opt
        
        # 复制 Wine 文件并重命名
        cp -r /tmp/wine-install wine-package/opt/wine-${{ env.WINE_VERSION }}-linbox-wow64

    - name: 创建压缩包
      run: |
        # 创建 tar.xz 压缩包
        cd wine-package/opt
        tar -cJf ../../wine-${{ env.WINE_VERSION }}-linbox-wow64-termux.tar.xz wine-${{ env.WINE_VERSION }}-linbox-wow64/
        cd ../..
        
        echo "创建的包:"
        ls -lh wine-*.tar.xz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.WINE_VERSION }}-linbox-wow64-termux
        path: wine-${{ env.WINE_VERSION }}-linbox-wow64-termux.tar.xz
        retention-days: 30

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: wine-${{ env.WINE_VERSION }}-wow64
        name: Wine ${{ env.WINE_VERSION }} (适用于 Termux 的 WOW64)
        body: |
          # Wine ${{ env.WINE_VERSION }} - 适用于 Termux 的 True WOW64
          
          ## 构建信息
          - **版本**: ${{ env.WINE_VERSION }}
          - **架构**: True WOW64 (32/64 位支持)
          - **平台**: Termux (Android)
          - **格式**: tar.xz
          - **目录**: wine-${{ env.WINE_VERSION }}-linbox-wow64
          
          ## 特性
          ✓ True WOW64 架构支持 (i386/x86_64)
          ✓ 实验性 WOW64 构建模式
          ✓ Vulkan 图形 API 支持
          ✓ GStreamer 多媒体支持  
          ✓ Termux 路径兼容性修复
          ✓ MF 兼容性补丁
          
          ## 构建详情
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.sha }}
          - 工作流: ${{ github.workflow }}
        files: wine-${{ env.WINE_VERSION }}-linbox-wow64-termux.tar.xz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出构建摘要
      run: |
        echo "=== 构建摘要 ==="
        echo "Wine 构建成功完成"
        echo "版本: ${{ env.WINE_VERSION }}"
        echo "架构: True WOW64 (i386/x86_64)"
        echo "构建方法: 实验性 WOW64 模式"
        echo "平台: Termux"
        echo "包格式: tar.xz"
        echo "安装目录: wine-${{ env.WINE_VERSION }}-linbox-wow64"
        echo ""
        echo "包含的特性:"
        echo "X11 图形支持"
        echo "Vulkan 图形 API"
        echo "ALSA 音频支持"
        echo "PulseAudio 音频支持"
        echo "FreeType 字体渲染"
        echo "FontConfig 字体配置"
        echo "GStreamer 多媒体"
        echo "Termux 路径兼容性"
        echo "MF 兼容性修复"
        echo "实验性 WOW64 架构"
        echo ""
        echo "构建产物: wine-${{ env.WINE_VERSION }}-linbox-wow64-termux.tar.xz"
        echo "安装路径: $PREFIX/opt/wine-${{ env.WINE_VERSION }}-linbox-wow64/"
        echo "================"