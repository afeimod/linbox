# build-wine-test.yml
name: Build TestWine WOW64 for Termux

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用更稳定的 Ubuntu 22.04

    steps:
    - name: 安装构建依赖
      run: |
        sudo apt update
        sudo apt --fix-broken install -y
        
        # 添加 32 位架构支持
        sudo dpkg --add-architecture i386
        sudo apt update
        
        # 先安装基础构建工具和缺失的依赖
        sudo apt install -y \
          git wget xz-utils autoconf flex bison \
          gcc-multilib g++-multilib \
          build-essential pkg-config \
          mingw-w64 gettext libgettextpo-dev \
          locales language-pack-zh-hans ccache \
          libunwind-dev libunwind-dev:i386  # 添加缺失的依赖

        # 安装完整的 64 位开发库
        sudo apt install -y \
          libx11-dev libxext-dev libxi-dev libxrandr-dev \
          libxcursor-dev libxcomposite-dev libxdamage-dev \
          libxfixes-dev libxxf86vm-dev libxrender-dev \
          libxinerama-dev libgl-dev libglu-dev \
          libosmesa6-dev libfreetype6-dev libfontconfig1-dev \
          libpcap-dev libdbus-1-dev libssl-dev \
          libasound2-dev libpulse-dev libudev-dev \
          libcups2-dev libjpeg-dev libpng-dev libtiff-dev \
          libxml2-dev libvulkan-dev vulkan-tools \
          libvulkan1 mesa-vulkan-drivers \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libmpg123-dev libopenal-dev

        # 安装完整的 32 位开发库
        sudo apt install -y \
          libc6-dev-i386 \
          libx11-dev:i386 libxext-dev:i386 libxi-dev:i386 \
          libxrandr-dev:i386 libxcursor-dev:i386 \
          libxcomposite-dev:i386 libxdamage-dev:i386 \
          libxfixes-dev:i386 libxxf86vm-dev:i386 \
          libxrender-dev:i386 libxinerama-dev:i386 \
          libgl-dev:i386 libglu-dev:i386 \
          libfreetype6-dev:i386 libfontconfig1-dev:i386 \
          libpcap-dev:i386 libdbus-1-dev:i386 \
          libasound2-dev:i386 libpulse-dev:i386 \
          libcups2-dev:i386 libjpeg-dev:i386 \
          libpng-dev:i386 libtiff-dev:i386 \
          libxml2-dev:i386 libvulkan-dev:i386 \
          libgstreamer1.0-dev:i386 libgstreamer-plugins-base1.0-dev:i386 \
          libmpg123-dev:i386 libopenal-dev:i386

        # 修复任何可能的依赖问题
        sudo apt --fix-broken install -y || true

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 克隆 Wine 源码
      run: |
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        # 使用稳定版本
        git checkout wine-9.0  # 使用已知稳定的版本

    - name: 应用关键补丁
      run: |
        cd wine
        
        # 只应用 DXGI 管理器补丁，移除有问题的字节流处理程序修改
        cat > wine_dxgi_only.patch << 'EOF'
        --- a/dlls/mfplat/main.c
        +++ b/dlls/mfplat/main.c
        @@ -9222,6 +9222,13 @@
         HRESULT WINAPI MFCreateDXGIDeviceManager(UINT *token, IMFDXGIDeviceManager **manager)
         {
             struct dxgi_device_manager *object;
        +    const char *do_not_create = getenv("WINE_DO_NOT_CREATE_DXGI_DEVICE_MANAGER");
         
             TRACE("%p, %p.\n", token, manager);
         
        +    if (do_not_create && do_not_create[0] != '\0')
        +    {
        +        FIXME("stubbing out\n");
        +        return E_NOTIMPL;
        +    }
        +
             if (!token || !manager)
                 return E_POINTER;
        EOF
        
        if patch -p1 -N < wine_dxgi_only.patch; then
            echo "✅ DXGI-only 补丁应用成功"
        else
            echo "⚠️ DXGI-only 补丁应用失败，继续构建"
        fi

        # 应用 esync 补丁
        wget -O esync.patch https://github.com/afeimod/linbox/raw/main/path/esync.patch
        if patch -p1 -N < esync.patch; then
            echo "✅ esync 补丁应用成功"
        else
            echo "⚠️ esync 补丁应用失败，继续构建"
        fi

        # 应用 Termux 路径修复补丁
        cat > termux-paths.patch << 'EOF'
        diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
        index 1234567..890abcd 100644
        --- a/dlls/ntdll/unix/server.c
        +++ b/dlls/ntdll/unix/server.c
        @@ -500,7 +500,7 @@ static void setup_server_dir( void )
             struct stat st;
             const char *tmpdir;
         
        -    tmpdir = getenv( "TMPDIR" );
        +    tmpdir = "/data/data/com.termux/files/usr/tmp";
             if (!tmpdir || stat( tmpdir, &st ) == -1) tmpdir = "/tmp";
             if (stat( tmpdir, &st ) == -1)
             {
        EOF
        if patch -p1 -N < termux-paths.patch; then
            echo "✅ Termux 路径补丁应用成功"
        else
            echo "⚠️ Termux 路径补丁应用失败，继续构建"
        fi

    - name: 准备构建环境
      run: |
        cd wine
        # 生成必要的文件
        if [ -f "dlls/winevulkan/make_vulkan" ]; then
            dlls/winevulkan/make_vulkan
        fi
        if [ -f "tools/make_requests" ]; then
            tools/make_requests
        fi
        if [ -f "tools/make_specfiles" ]; then
            tools/make_specfiles
        fi
        
        # 运行 autoconf 生成 configure 脚本
        if [ -f "autogen.sh" ]; then
            ./autogen.sh
        else
            autoreconf -f
        fi

    - name: 配置和构建 64 位 Wine（完整功能）
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建构建目录
        mkdir -p build64
        cd build64

        # 配置 64 位 Wine，启用所有功能
        ../configure \
          --enable-win64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-gstreamer \
          --with-alsa \
          --with-pulse \
          --with-dbus \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --without-ldap --without-oss \
          --disable-winemenubuilder --disable-win16 --disable-tests
        
        # 构建并安装
        make -j$(nproc) install

    - name: 构建 32 位工具（完整功能）
      run: |
        cd wine
        mkdir -p build32-tools
        cd build32-tools
        
        # 配置 32 位工具，启用所有功能
        export PKG_CONFIG_LIBDIR=/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
        export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
        
        ../configure \
          --prefix=/tmp/wine-tools \
          --with-x \
          --with-alsa \
          --with-pulse \
          --with-dbus \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --without-ldap --without-oss \
          --disable-winemenubuilder --disable-win16 --disable-tests
        
        # 构建并安装
        make -j$(nproc) install

    - name: 构建 32 位 Wine (WOW64，完整功能)
      run: |
        cd wine
        mkdir -p build32
        cd build32
        
        # 配置 32 位 Wine，链接到 64 位构建，启用所有功能
        export PKG_CONFIG_LIBDIR=/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
        export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
        
        ../configure \
          --with-wine64=../build64 \
          --with-wine-tools=../build32-tools \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-alsa \
          --with-pulse \
          --with-dbus \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --without-ldap --without-oss \
          --disable-winemenubuilder --disable-win16 --disable-tests
        
        # 构建并安装到 64 位目录（创建 WOW64）
        make -j$(nproc) install

    - name: 准备 Termux 包
      run: |
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/bin
        mkdir -p wine-package/share/fonts
        
        # 复制 Wine 安装文件
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        # 下载中文字体
        cd wine-package/share/fonts
        wget -q https://github.com/adobe-fonts/source-han-sans/raw/release/OTF/SourceHanSansSC-Regular.otf || true
        wget -q https://github.com/adobe-fonts/source-han-serif/raw/release/OTF/SourceHanSerifSC-Regular.otf || true
        cd ../../..

    - name: 创建包装脚本
      run: |
        # 创建 wine 包装脚本
        cat > wine-package/bin/wine << 'EOF'
        #!/bin/bash
        # WOW64 Wine for Termux 启动脚本
        
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export HOME="$HOME"
        
        # 设置临时目录
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export TEMP="$TMPDIR"
        export TMP="$TMPDIR"
        mkdir -p "$TMPDIR" 2>/dev/null
        
        # 设置 Wine 前缀
        if [ -z "$WINEPREFIX" ]; then
            export WINEPREFIX="$HOME/.wine"
        fi
        mkdir -p "$WINEPREFIX" 2>/dev/null
        
        # 设置库路径
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$LD_LIBRARY_PATH"
        
        # 设置 Vulkan
        export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"
        
        # 设置 GStreamer
        export GST_PLUGIN_SYSTEM_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"
        export GST_PLUGIN_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"
        
        # 设置字体
        export FONTCONFIG_PATH="$TERMUX_PREFIX/opt/wine/etc/fonts"
        export FONTCONFIG_FILE="$FONTCONFIG_PATH/fonts.conf"
        
        # 设置 Wine 路径
        export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        export WINEARCH="win64"  # WOW64 模式
        
        # 中文环境
        export LANG="zh_CN.UTF-8"
        export LC_ALL="zh_CN.UTF-8"
        export LC_CTYPE="zh_CN.UTF-8"
        
        # 运行 wine
        exec "$TERMUX_PREFIX/opt/wine/bin/wine" "$@"
        EOF
        
        # 创建 wineserver 包装脚本
        cat > wine-package/bin/wineserver << 'EOF'
        #!/bin/bash
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$LD_LIBRARY_PATH"
        export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        exec "$TERMUX_PREFIX/opt/wine/bin/wineserver" "$@"
        EOF
        
        chmod +x wine-package/bin/wine
        chmod +x wine-package/bin/wineserver

    - name: 创建配置文件和安装脚本
      run: |
        # 创建字体配置
        mkdir -p wine-package/opt/wine/etc/fonts
        cat > wine-package/opt/wine/etc/fonts/fonts.conf << 'EOF'
        <?xml version="1.0"?>
        <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
        <fontconfig>
            <dir>/data/data/com.termux/files/usr/share/fonts</dir>
            <dir>/system/fonts</dir>
            <alias>
                <family>serif</family>
                <prefer>
                    <family>Source Han Serif SC</family>
                    <family>Noto Serif CJK SC</family>
                    <family>DejaVu Serif</family>
                </prefer>
            </alias>
            <alias>
                <family>sans-serif</family>
                <prefer>
                    <family>Source Han Sans SC</family>
                    <family>Noto Sans CJK SC</family>
                    <family>DejaVu Sans</family>
                </prefer>
            </alias>
        </fontconfig>
        EOF
        
        # 创建安装脚本
        cat > wine-package/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "WOW64 Wine for Termux 安装脚本"
        
        TERMUX_PREFIX="/data/data/com.termux/files/usr"
        INSTALL_DIR="$TERMUX_PREFIX/opt/wine"
        BIN_DIR="$TERMUX_PREFIX/bin"
        FONT_DIR="$TERMUX_PREFIX/share/fonts"
        
        # 创建目录
        mkdir -p "$INSTALL_DIR" "$BIN_DIR" "$FONT_DIR" "$TERMUX_PREFIX/tmp" "$HOME/.wine"
        
        # 安装文件
        cp -r opt/wine/* "$INSTALL_DIR"/
        cp bin/wine "$BIN_DIR"/
        cp bin/wineserver "$BIN_DIR"/
        cp share/fonts/* "$FONT_DIR"/ 2>/dev/null || true
        
        chmod +x "$BIN_DIR"/wine "$BIN_DIR"/wineserver
        
        # 配置环境
        if ! grep -q "WOW64 Wine" "$HOME/.bashrc" 2>/dev/null; then
            cat >> "$HOME/.bashrc" << 'EOL'

            # WOW64 Wine 环境配置
            export TERMUX_PREFIX="/data/data/com.termux/files/usr"
            export WINEPREFIX="$HOME/.wine"
            export WINEARCH="win64"
            export PATH="$PATH:$TERMUX_PREFIX/opt/wine/bin"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64"
            export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        export TMPDIR="$TERMUX_PREFIX/tmp"
            export LANG="zh_CN.UTF-8"
            export FONTCONFIG_PATH="$TERMUX_PREFIX/opt/wine/etc/fonts"
            EOL
        fi
        
        echo "安装完成！请重新启动 Termux 或运行: source ~/.bashrc"
        echo "然后运行: wine wineboot 初始化 Wine"
        EOF
        
        chmod +x wine-package/install.sh

    - name: 获取版本信息
      run: |
        cd wine
        WINE_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "9.0")
        COMMIT_HASH=$(git rev-parse --short HEAD)
        echo "WINE_VERSION=${WINE_VERSION}-${COMMIT_HASH}-wow64" >> $GITHUB_ENV
        echo "构建版本: ${WINE_VERSION}-${COMMIT_HASH}-wow64"

    - name: 打包构建产物
      run: |
        # 打包
        tar -czf wine-${{ env.WINE_VERSION }}-termux.tar.gz wine-package/
        echo "打包完成:"
        ls -lh wine-*.tar.gz

    - name: 上传构建产物到 Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wine-wow64-termux-${{ env.WINE_VERSION }}
        path: wine-${{ env.WINE_VERSION }}-termux.tar.gz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: wine-wow64-${{ env.WINE_VERSION }}
        name: Wine WOW64 ${{ env.WINE_VERSION }} for Termux
        files: wine-${{ env.WINE_VERSION }}-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出构建信息
      run: |
        echo "✅ WOW64 Wine 构建完成"
        echo "版本: ${{ env.WINE_VERSION }}"
        echo "架构: x86_64 WOW64 (支持 32/64 位应用)"
        echo "特性:"
        echo "✓ DXGI 管理器补丁 (通过环境变量控制)"
        echo "✓ esync 补丁"
        echo "✓ Termux 路径修复"
        echo "✓ Vulkan 支持"
        echo "✓ GStreamer 完整支持"
        echo "✓ X11 图形支持"
        echo "✓ ALSA/PulseAudio 音频支持"
        echo "✓ CUPS 打印支持"
        echo "✓ DBus 支持"
        echo "✓ 中文环境和字体"
        echo ""
        echo "使用说明:"
        echo "1. 下载 wine-${{ env.WINE_VERSION }}-termux.tar.gz"
        echo "2. 解压: tar -xzf wine-*.tar.gz"
        echo "3. 进入目录: cd wine-package"
        echo "4. 运行安装: ./install.sh"
        echo "5. 重新加载环境: source ~/.bashrc"
        echo "6. 初始化: wine wineboot"
        echo ""
        echo "注意: 如需禁用 DXGI 设备管理器，请设置环境变量:"
        echo "export WINE_DO_NOT_CREATE_DXGI_DEVICE_MANAGER=1"