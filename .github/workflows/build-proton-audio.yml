# build-wine-proton.yml
name: Build Proton AudioWOW64 for Termux with Enhanced Audio

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

env:
  BUILD_DIR: "/tmp/build_wine"

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 安装构建依赖
      run: |
        sudo apt update
        # 先修复损坏的依赖
        sudo apt --fix-broken install -y
        sudo apt install -y \
          debootstrap \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          vulkan-tools \
          libvulkan1 \
          mesa-vulkan-drivers \
          mingw-w64 \
          gettext \
          locales \
          language-pack-zh-hans \
          # 增强音频支持
          libfaad-dev \
          libflac-dev \
          libvorbis-dev \
          libopus-dev \
          libspeex-dev \
          libtheora-dev \
          libcdparanoia-dev \
          libjack-dev \
          libsdl2-dev \
          libsamplerate0-dev

    - name: 安装多媒体和音频依赖
      run: |
        # 先安装 libunwind-dev 解决依赖问题
        sudo apt install -y libunwind-dev
        # 然后安装多媒体相关包
        sudo apt install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav \
          libmpg123-dev \
          libopenal-dev \
          # 额外的音频编解码器
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswresample-dev \
          libswscale-dev

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 检查工作目录
      run: |
        echo "当前工作目录: $(pwd)"
        ls -la

    - name: 构建 Proton WOW64 版本
      run: |
        set -e
        
        echo "开始构建 Proton WOW64 版本（增强音频支持）..."
        
        # 设置中文构建环境
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8
        export LANGUAGE=zh_CN:zh:en_US:en
        
        # 清理并创建构建目录
        rm -rf $BUILD_DIR/proton
        mkdir -p $BUILD_DIR/proton
        cd $BUILD_DIR/proton
        
        # 克隆 Proton 源码
        git clone https://github.com/ValveSoftware/wine
        cd wine
        
        # 切换到 Proton 10.0 分支
        git checkout proton_10.0
        
        # 修复 Termux 路径问题
        echo "修复 Termux 路径问题..."
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 生成 configure 脚本
        echo "生成 configure 脚本..."
        ./autogen.sh
        
        # 配置 Wine（增强音频支持）
        mkdir -p build64
        cd build64
        
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install-proton \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-mpg123 \
          --with-openal \
          --with-gettext \
          --enable-nls \
          --without-gettextpo \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland
        
        # 构建并安装
        make -j$(nproc)
        make install
        
        # 检查音频组件
        echo "检查音频组件安装..."
        find /tmp/wine-install-proton -name "*audio*" -o -name "*alsa*" -o -name "*pulse*" -o -name "*openal*" -o -name "*gstreamer*" -o -name "*mpg123*" | head -20
        
        cd ../..
        
        # 获取版本信息
        VERSION_PROTON=$(cd wine && git describe --tags --abbrev=0 2>/dev/null || echo "10.0")
        COMMIT_HASH=$(cd wine && git rev-parse --short HEAD)
        PROTON_VERSION="${VERSION_PROTON}-${COMMIT_HASH}"
        echo "PROTON_VERSION=$PROTON_VERSION" >> $GITHUB_ENV
        
        # 打包 - 确保在正确的工作目录
        cd $GITHUB_WORKSPACE
        mkdir -p build-output
        tar -czf build-output/wine-proton-wow64-$PROTON_VERSION.tar.gz -C /tmp/wine-install-proton .
        
        echo "Proton WOW64 构建完成: wine-proton-wow64-$PROTON_VERSION.tar.gz"

    - name: 检查构建输出中的本地化文件
      run: |
        echo "检查构建的本地化文件..."
        cd build-output
        tar -tzf wine-proton-wow64-$PROTON_VERSION.tar.gz | grep -i "zh\|chinese\|locale" | head -20 || echo "未找到相关本地化文件"

    - name: 检查构建输出
      run: |
        echo "检查构建输出目录:"
        ls -la build-output/
        echo "当前工作目录内容:"
        ls -la

    - name: 为 Termux 准备安装包
      run: |
        # 切换到构建输出目录
        cd build-output
        
        # 使用 Proton WOW64 作为 Termux 包的基础
        PROTON_FILE=$(ls wine-proton-wow64-*.tar.gz | head -1)
        if [ -z "$PROTON_FILE" ]; then
          echo "错误: 找不到 Proton 构建文件!"
          ls -la
          exit 1
        fi
        
        echo "使用构建文件: $PROTON_FILE"
        
        # 解压构建文件到临时目录
        mkdir -p /tmp/wine-termux
        tar -xzf "$PROTON_FILE" -C /tmp/wine-termux
        
        # 创建 Termux 包结构
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/bin
        
        # 复制 Wine 文件
        cp -r /tmp/wine-termux/* wine-package/opt/wine/
        
        # 创建包装脚本 - 增强中文和音频支持
        cat > wine-package/bin/wine << 'EOF'
        #!/bin/bash
        # Wine Proton for Termux 启动脚本 - 增强中文和音频支持
        
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export HOME="$HOME"
        
        # 设置临时目录
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export TEMP="$TMPDIR"
        export TMP="$TMPDIR"
        
        # 确保临时目录存在
        mkdir -p "$TMPDIR" 2>/dev/null
        
        # 设置 Wine 前缀
        if [ -z "$WINEPREFIX" ]; then
            export WINEPREFIX="$HOME/.wine"
        fi
        
        # 确保 Wine 前缀目录存在
        mkdir -p "$WINEPREFIX" 2>/dev/null
        
        # 设置库路径
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$LD_LIBRARY_PATH"
        
        # 设置 Vulkan 驱动路径
        export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"
        
        # 设置字体路径
        export FONTCONFIG_PATH="$TERMUX_PREFIX/opt/wine/etc/fonts"
        
        # 设置其他 Wine 相关环境变量
        export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        export WINEARCH="win64"  # WOW64 模式
        
        # 强制设置中文环境 - 增强版本
        export LANG="zh_CN.UTF-8"
        export LC_ALL="zh_CN.UTF-8"
        export LC_CTYPE="zh_CN.UTF-8"
        export LANGUAGE="zh_CN:zh:en_US:en"
        
        # 设置 Wine 的 UI 语言为中文
        export WINELANG="zh_CN"
        
        # 音频环境变量 - 增强兼容性
        export PULSE_RUNTIME_PATH="$TERMUX_PREFIX/var/run/pulse"
        export ALSA_CONFIG_PATH="$TERMUX_PREFIX/etc/alsa.conf"
        
        # GStreamer 配置
        export GST_PLUGIN_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"
        export GST_PLUGIN_SYSTEM_PATH="$GST_PLUGIN_PATH"
        
        # OpenAL 配置
        export ALSOFT_DRIVERS="pulse,alsa"
        
        # 确保 PulseAudio 运行时目录存在
        mkdir -p "$PULSE_RUNTIME_PATH" 2>/dev/null
        
        # 运行真正的 wine 程序
        exec "$TERMUX_PREFIX/opt/wine/bin/wine" "$@"
        EOF
        
        chmod +x wine-package/bin/wine
        
        # 创建其他包装脚本
        for bin in wineserver winecfg; do
          cat > wine-package/bin/$bin << EOF
        #!/bin/bash
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export TMPDIR="\$TERMUX_PREFIX/tmp"
        export LD_LIBRARY_PATH="\$TERMUX_PREFIX/opt/wine/lib:\$TERMUX_PREFIX/opt/wine/lib64:\$TERMUX_PREFIX/lib:\$LD_LIBRARY_PATH"
        export WINEDLLPATH="\$TERMUX_PREFIX/opt/wine/lib/wine:\$TERMUX_PREFIX/opt/wine/lib64/wine"
        # 强制中文环境
        export LANG="zh_CN.UTF-8"
        export LC_ALL="zh_CN.UTF-8"
        export WINELANG="zh_CN"
        # 音频环境
        export PULSE_RUNTIME_PATH="\$TERMUX_PREFIX/var/run/pulse"
        export ALSA_CONFIG_PATH="\$TERMUX_PREFIX/etc/alsa.conf"
        exec "\$TERMUX_PREFIX/opt/wine/bin/$bin" "\$@"
        EOF
          chmod +x wine-package/bin/$bin
        done

    - name: 创建安装脚本和配置
      run: |
        # 切换到构建输出目录
        cd build-output
        
        # 创建安装脚本
        cat > wine-package/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "=========================================="
        echo "   Wine Proton WOW64 for Termux 安装脚本"
        echo "=========================================="
        
        TERMUX_PREFIX="/data/data/com.termux/files/usr"
        INSTALL_DIR="$TERMUX_PREFIX/opt/wine"
        BIN_DIR="$TERMUX_PREFIX/bin"
        
        # 检查环境
        if [ ! -d "$TERMUX_PREFIX" ]; then
            echo "错误: 这似乎不是 Termux 环境!"
            exit 1
        fi
        
        # 创建目录
        echo "创建目录..."
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$BIN_DIR"
        mkdir -p "$TERMUX_PREFIX/tmp"
        mkdir -p "$TERMUX_PREFIX/share/vulkan/icd.d"
        mkdir -p "$TERMUX_PREFIX/var/run/pulse"
        mkdir -p "$HOME/.wine"
        
        # 安装文件
        echo "安装 Wine 文件..."
        cp -r opt/wine/* "$INSTALL_DIR"/
        
        echo "安装启动脚本..."
        cp bin/wine "$BIN_DIR"/
        cp bin/wineserver "$BIN_DIR"/
        cp bin/winecfg "$BIN_DIR"/
        
        chmod +x "$BIN_DIR"/wine
        chmod +x "$BIN_DIR"/wineserver
        chmod +x "$BIN_DIR"/winecfg
        
        # 创建 Vulkan ICD 配置
        cat > "$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json" << 'EOL'
        {
            "file_format_version": "1.0.0",
            "ICD": {
                "library_path": "libvulkan_freedreno.so",
                "api_version": "1.0.0"
            }
        }
        EOL
        
        # 配置环境 - 增强音频支持
        echo "配置环境变量..."
        
        if ! grep -q "Wine Proton WOW64 for Termux" "$HOME/.bashrc" 2>/dev/null; then
            cat >> "$HOME/.bashrc" << 'EOL'

            export TERMUX_PREFIX="/data/data/com.termux/files/usr"
            export WINEPREFIX="$HOME/.wine"
            export WINEARCH="win64"
            export PATH="$PATH:$TERMUX_PREFIX/opt/wine/bin"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib"
            export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
            export TMPDIR="$TERMUX_PREFIX/tmp"
            export TEMP="$TMPDIR"
            export TMP="$TMPDIR"
            
            # 强制中文环境设置
            export LANG="zh_CN.UTF-8"
            export LC_ALL="zh_CN.UTF-8"
            export LC_CTYPE="zh_CN.UTF-8"
            export LANGUAGE="zh_CN:zh:en_US:en"
            export WINELANG="zh_CN"

            # 音频环境变量 - 增强兼容性
            export PULSE_RUNTIME_PATH="$TERMUX_PREFIX/var/run/pulse"
            export ALSA_CONFIG_PATH="$TERMUX_PREFIX/etc/alsa.conf"
            
            # GStreamer 配置
            export GST_PLUGIN_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"
            export GST_PLUGIN_SYSTEM_PATH="$GST_PLUGIN_PATH"
            
            # OpenAL 配置
            export ALSOFT_DRIVERS="pulse,alsa"

            # Vulkan 配置
            export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"
            # ==========================================
            EOL
        fi
        
        echo ""
        echo "=========================================="
        echo "   Wine Proton WOW64 安装完成!"
        echo "=========================================="
        echo ""
        echo "特性:"
        echo "✓ 基于 Valve Proton 10.0 分支"
        echo "✓ WOW64 架构 (同时支持 32/64 位应用)"
        echo "✓ Vulkan 图形 API 支持"
        echo "✓ 增强音频支持 (ALSA, PulseAudio, OpenAL, GStreamer, MPG123)"
        echo "✓ 完整中文语言支持"
        echo "✓ 游戏优化和兼容性改进"
        echo ""
        echo "音频支持已启用:"
        echo "✓ ALSA 音频后端"
        echo "✓ PulseAudio 音频服务器"
        echo "✓ OpenAL 3D 音频"
        echo "✓ GStreamer 多媒体框架"
        echo "✓ MPG123 MP3 解码"
        echo "✓ 多种音频编解码器支持 (FLAC, Vorbis, Opus, AAC, Speex)"
        echo "✓ SDL2 音频支持"
        echo "✓ FFmpeg 媒体支持"
        echo ""
        echo "下一步:"
        echo "1. 重新启动 Termux 或运行: source ~/.bashrc"
        echo "2. 安装音频包: pkg install pulseaudio openal mpg123 gstreamer"
        echo "3. 启动 PulseAudio: pulseaudio --start --exit-idle-time=-1"
        echo "4. 初始化 Wine: wine wineboot"
        echo "5. 配置 Wine: winecfg"
        echo ""
        echo "音频故障排除:"
        echo "- 启动 PulseAudio: pulseaudio --start --exit-idle-time=-1"
        echo "- 检查 PulseAudio 状态: pulseaudio --check"
        echo "- 重启音频服务: pkill pulseaudio && pulseaudio --start --exit-idle-time=-1"
        echo "- 检查音频设备: wine winecfg (Audio 标签)"
        echo "- 测试音频: 运行一个有声音的程序"
        echo "- 确保没有其他音频服务冲突"
        echo ""
        echo "Vulkan 支持:"
        echo "- 确保安装了 Mesa Vulkan 驱动: pkg install mesa-vulkan-driver"
        echo "- 检查设备 Vulkan 支持"
        echo ""
        echo "故障排除:"
        echo "- 确保 Termux 有存储权限"
        echo "- 运行: termux-setup-storage"
        echo "- 检查 Wine 前缀: echo \$WINEPREFIX"
        echo "- 查看 Wine 日志: WINEDEBUG=+all wine 程序名 2>&1 | grep -i audio"
        echo "=========================================="
        EOF
        
        chmod +x wine-package/install.sh

    - name: 创建打包文件
      run: |
        # 切换到构建输出目录
        cd build-output
        
        # 获取版本信息
        PROTON_FILE=$(ls wine-proton-wow64-*.tar.gz | head -1)
        PROTON_VERSION=$(echo "$PROTON_FILE" | sed 's/wine-proton-wow64-//' | sed 's/.tar.gz//')
        
        echo "PROTON_VERSION=$PROTON_VERSION" >> $GITHUB_ENV
        
        # 打包 Termux 版本
        tar -czf wine-proton-wow64-termux-$PROTON_VERSION.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh *.tar.gz

    - name: 设置 Release 标签
      run: |
        CURRENT_DATE=$(date +%Y%m%d)
        echo "RELEASE_TAG=proton-wow64-$CURRENT_DATE" >> $GITHUB_ENV
        echo "Release 标签设置为: $RELEASE_TAG"

    - name: 上传所有构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-proton-wow64-builds
        path: |
          build-output/wine-*.tar.gz
        retention-days: 7

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Wine Proton WOW64 Build ${{ env.RELEASE_TAG }}
        files: |
          build-output/wine-*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息和使用说明
      run: |
        echo "✅ Wine Proton WOW64 构建完成"
        echo ""
        echo "构建的版本:"
        echo "- Proton WOW64: $PROTON_VERSION"
        echo "- Termux 安装包: wine-proton-wow64-termux-$PROTON_VERSION.tar.gz"
        echo "- Release 标签: $RELEASE_TAG"
        echo ""
        echo "启用的功能:"
        echo "✓ GStreamer 多媒体支持"
        echo "✓ MPG123 音频支持" 
        echo "✓ OpenAL 3D 音频支持"
        echo "✓ ALSA 音频后端"
        echo "✓ PulseAudio 音频服务器"
        echo "✓ 多种音频编解码器 (FLAC, Vorbis, Opus, AAC, Speex, Theora)"
        echo "✓ SDL2 音频支持"
        echo "✓ FFmpeg 媒体支持"
        echo "✓ 完整中文语言支持 (NLS 已启用)"
        echo "✓ Vulkan 图形 API 支持"
        echo "✓ 游戏优化和兼容性改进"
        echo ""
        echo "音频支持增强:"
        echo "✓ 包含所有主要音频后端"
        echo "✓ 支持多种音频格式"
        echo "✓ 游戏音频兼容性改进"
        echo "✓ 环境变量优化"
        echo "✓ PulseAudio 自动启动配置"
        echo ""
        echo "文件说明:"
        echo "wine-proton-wow64-*.tar.gz - Proton WOW64 原始构建文件"
        echo "wine-proton-wow64-termux-*.tar.gz - Termux 专用安装包"
        echo ""
        echo "使用说明:"
        echo "1. 下载 wine-proton-wow64-termux-$PROTON_VERSION.tar.gz"
        echo "2. 解压: tar -xzf wine-proton-wow64-termux-$PROTON_VERSION.tar.gz"
        echo "3. 进入目录: cd wine-package"
        echo "4. 运行安装: ./install.sh"
        echo "5. 重新加载环境: source ~/.bashrc"
        echo "6. 安装音频包: pkg install pulseaudio openal mpg123 gstreamer"
        echo "7. 启动音频: pulseaudio --start --exit-idle-time=-1"
        echo "8. 初始化: wine wineboot"
        echo "9. 配置音频: wine winecfg (Audio 标签)"
        echo ""
        echo "音频故障排除:"
        echo "- 确保 PulseAudio 正在运行: pulseaudio --check"
        echo "- 重启音频服务: pkill pulseaudio && pulseaudio --start --exit-idle-time=-1"
        echo "- 检查 Wine 音频设置: wine winecfg"
        echo "- 尝试不同的音频驱动 (ALSA/PulseAudio)"
        echo "- 查看详细日志: WINEDEBUG=+all wine 程序名 2>&1 | grep -i audio"
        echo ""
        echo "游戏音频优化:"
        echo "- 对于无声游戏，尝试在 winecfg 中更改音频驱动"
        echo "- 确保游戏使用的是支持的音频格式"
        echo "- 检查游戏音频设置中的采样率和位深"
        echo "- 某些游戏可能需要特定的音频 DLL 覆盖"
        echo ""
        echo "注意:"
        echo "- 这是基于 Valve Proton 的 WOW64 构建"
        echo "- 单一二进制支持 32/64 位应用"
        echo "- 包含完整的多媒体和音频支持"
        echo "- 已修复 Termux 路径问题"
        echo "- 专为游戏和兼容性优化"
        echo "- 增强音频支持以解决游戏无声问题"