name: Build NewWine (WoW64 + Staging-TKG + Termux)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (例如: 9.9, 9.21, 9.22)'
        required: true
        default: '9.21'
        type: string
      build_type:
        description: '构建类型'
        required: true
        default: 'staging-tkg'
        type: choice
        options:
          - staging-tkg
          - staging
          - vanilla
          - proton

permissions:
  contents: write

jobs:
  create-bootstrap:
    name: Create WoW64 Bootstrap
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
      options: --privileged --security-opt seccomp=unconfined
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create bootstraps
        run: |
          apt update
          apt install -y debootstrap perl wget xz-utils sudo
          chmod +x ubuntu_bootstrap_wow64.sh
          ./ubuntu_bootstrap_wow64.sh
          cd /opt
          tar -I "xz -T0 -9" -cpf bootstraps_wow64.tar.xz chroots
          sha256sum *.tar.xz

      - name: Upload bootstrap artifact
        uses: actions/upload-artifact@v4
        with:
          name: bootstraps-wow64
          path: /opt/bootstraps_wow64.tar.xz
          retention-days: 1

  build-wine:
    name: Build Wine (${{ github.event.inputs.build_type }})
    runs-on: ubuntu-24.04
    needs: create-bootstrap
    container:
      image: ubuntu:24.04
      options: --privileged --security-opt seccomp=unconfined
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download bootstrap artifact
        uses: actions/download-artifact@v4
        with:
          name: bootstraps-wow64
          path: /opt

      - name: Install xz-utils for extraction
        run: |
          apt update
          apt install -y xz-utils

      - name: Extract bootstrap
        run: |
          mkdir -p /opt/chroots
          tar -xpf "/opt/bootstraps_wow64.tar.xz" -C /opt

      - name: Install build dependencies
        run: |
          apt update
          apt install -y \
            git wget xz-utils bubblewrap autoconf flex bison \
            gcc-14 g++-14 gcc-multilib g++-multilib ccache \
            libx11-dev libxext-dev libxi-dev libxrandr-dev \
            libxcursor-dev libxcomposite-dev libxdamage-dev \
            libxfixes-dev libxxf86vm-dev libxrender-dev \
            libxinerama-dev libgl-dev libglu-dev \
            libosmesa6-dev libfreetype6-dev libfontconfig1-dev \
            libpcap-dev libdbus-1-dev libssl-dev \
            libasound2-dev libpulse-dev libudev-dev \
            libcups2-dev libjpeg-dev libpng-dev libtiff-dev \
            libxml2-dev libvulkan-dev vulkan-tools \
            libvulkan1 mesa-vulkan-drivers mingw-w64 \
            gettext libgettextpo-dev locales \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libmpg123-dev libopenal-dev libunwind-dev

      - name: Set build environment
        run: |
          echo "BUILD_WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
          echo "BUILD_WINE_BRANCH=${{ github.event.inputs.build_type }}" >> $GITHUB_ENV
          echo "构建 Wine 版本: ${{ github.event.inputs.wine_version }}"
          echo "构建分支: ${{ github.event.inputs.build_type }}"

      - name: Build Wine with custom script
        env:
          WINE_VERSION: ${{ github.event.inputs.wine_version }}
          WINE_BRANCH: ${{ github.event.inputs.build_type }}
          TERMUX_GLIBC: true
          EXPERIMENTAL_WOW64: true
          USE_CCACHE: true
          STAGING_VERSION: v${{ github.event.inputs.wine_version }}
          ALLOW_ROOT: true
          BUILD_DIR: /github/workspace/build_wine
        run: |
          chmod +x build_wine.sh
          # 设置终端环境变量
          export TERM=xterm-256color
          echo "开始构建 Wine $WINE_VERSION ($WINE_BRANCH)"
          ./build_wine.sh

      - name: Check build artifacts
        run: |
          echo "检查构建产物..."
          ls -la *.tar.xz || echo "未找到 tar.xz 文件"
          find . -name "*.tar.xz" -type f | while read f; do
            echo "找到文件: $f"
            ls -lh "$f"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wine-${{ github.event.inputs.wine_version }}-${{ github.event.inputs.build_type }}-wow64
          path: "*.tar.xz"
        if: success()

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: wine-${{ github.event.inputs.wine_version }}-${{ github.event.inputs.build_type }}-wow64
          name: Wine ${{ github.event.inputs.wine_version }} ${{ github.event.inputs.build_type }} (WoW64 for Termux)
          body: |
            # Wine ${{ github.event.inputs.wine_version }} ${{ github.event.inputs.build_type }} - WoW64 for Termux
            
            ## 构建信息
            - **Wine 版本**: ${{ github.event.inputs.wine_version }}
            - **分支**: ${{ github.event.inputs.build_type }}
            - **架构**: WoW64 (32位和64位支持)
            - **平台**: Termux (Android)
            
            ## 特性
            ✓ WoW64 架构支持
            ✓ 针对 Termux 环境优化
            ✓ 应用了必要的兼容性补丁
            ✓ 包含 MF 补丁修复

            ## 使用说明
            1. 下载对应的 tar.xz 文件
            2. 在 Termux 中解压: `tar -xf wine-*.tar.xz -C $PREFIX`
            3. 设置环境变量: `export WINEPREFIX=$HOME/.wine`
            4. 运行: `wine winecfg`

            ## 构建配置
            - 构建时间: ${{ github.event.head_commit.timestamp }}
            - 工作流: ${{ github.workflow }}
            - 提交: ${{ github.sha }}
          files: "*.tar.xz"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print build summary
        run: |
          echo "✅ Wine 构建完成!"
          echo "版本: ${{ github.event.inputs.wine_version }}"
          echo "分支: ${{ github.event.inputs.build_type }}"
          echo "架构: WoW64"
          echo ""
          echo "构建产物已上传到 Release 和 Artifacts"