name: Wine Build Pipeline (WoW64 + Staging-TKG + Termux)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Wine 版本号 (例如: 9.9, 9.21, 9.22)'
        required: true
        default: '9.21'
        type: string
      build_type:
        description: '构建类型'
        required: true
        default: 'staging-tkg'
        type: choice
        options:
          - staging-tkg
          - staging
          - vanilla
          - proton

permissions:
  contents: write

jobs:
  create-bootstrap:
    name: Create WoW64 Bootstrap
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create bootstraps
        run: |
          sudo apt update
          sudo apt install -y debootstrap perl wget xz-utils
          chmod +x ubuntu_bootstrap_wow64.sh
          sudo ./ubuntu_bootstrap_wow64.sh
          cd /opt
          sudo tar -I "xz -T0 -9" -cpf bootstraps_wow64.tar.xz chroots
          sha256sum *.tar.xz

      - name: Upload bootstrap artifact
        uses: actions/upload-artifact@v4
        with:
          name: bootstraps-wow64
          path: /opt/bootstraps_wow64.tar.xz

  build-wine:
    name: Build Wine (${{ github.event.inputs.build_type }})
    runs-on: ubuntu-24.04
    needs: create-bootstrap
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download bootstrap artifact
        uses: actions/download-artifact@v4
        with:
          name: bootstraps-wow64
          path: /opt

      - name: Extract bootstrap
        run: |
          sudo mkdir -p /opt/chroots
          sudo tar -xpf "/opt/bootstraps_wow64.tar.xz" -C /opt

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            git wget xz-utils bubblewrap autoconf flex bison \
            gcc-multilib g++-multilib ccache \
            libx11-dev libxext-dev libxi-dev libxrandr-dev \
            libxcursor-dev libxcomposite-dev libxdamage-dev \
            libxfixes-dev libxxf86vm-dev libxrender-dev \
            libxinerama-dev libgl-dev libglu-dev \
            libosmesa6-dev libfreetype6-dev libfontconfig1-dev \
            libpcap-dev libdbus-1-dev libssl-dev \
            libasound2-dev libpulse-dev libudev-dev \
            libcups2-dev libjpeg-dev libpng-dev libtiff-dev \
            libxml2-dev libvulkan-dev vulkan-tools \
            libvulkan1 mesa-vulkan-drivers mingw-w64 \
            gettext libgettextpo-dev locales \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libmpg123-dev libopenal-dev libunwind-dev

      - name: Set version variables
        run: |
          echo "WINE_VERSION=${{ github.event.inputs.wine_version }}" >> $GITHUB_ENV
          echo "WINE_BRANCH=${{ github.event.inputs.build_type }}" >> $GITHUB_ENV
          echo "构建 Wine 版本: ${{ github.event.inputs.wine_version }}"
          echo "构建分支: ${{ github.event.inputs.build_type }}"

      - name: Set build environment
        run: |
          echo "TERMUX_GLIBC=true" >> $GITHUB_ENV
          echo "EXPERIMENTAL_WOW64=true" >> $GITHUB_ENV
          echo "USE_CCACHE=true" >> $GITHUB_ENV

      - name: Configure build options based on version
        run: |
          # 解析版本号进行比较
          VERSION_MAJOR=$(echo ${{ env.WINE_VERSION }} | cut -d. -f1)
          VERSION_MINOR=$(echo ${{ env.WINE_VERSION }} | cut -d. -f2)
          
          echo "Wine 版本: ${{ env.WINE_VERSION }}"
          echo "主版本: $VERSION_MAJOR, 次版本: $VERSION_MINOR"
          
          # 判断版本是否 >= 9.10
          if [ $VERSION_MAJOR -gt 9 ] || [ $VERSION_MAJOR -eq 9 -a $VERSION_MINOR -ge 10 ]; then
              echo "使用 9.10+ 版本的 MF 修复方式"
              echo "PATCH_TYPE=wine_do_not_create_dxgi_manager2" >> $GITHUB_ENV
              echo "MF_PATCH_URL=https://github.com/afeimod/linbox/raw/main/path/wine_do_not_create_dxgi_manager2.patch" >> $GITHUB_ENV
          else
              echo "使用 9.10 以下版本的 MF 修复方式"
              echo "PATCH_TYPE=fix_wine9_2_mfplat" >> $GITHUB_ENV
              echo "MF_PATCH_URL=https://github.com/afeimod/linbox/raw/main/path/fix_wine9.2_mfplat.sh" >> $GITHUB_ENV
          fi

      - name: Download and apply MF patches
        run: |
          echo "下载 MF 补丁: ${{ env.MF_PATCH_URL }}"
          wget -O mf_patch "${{ env.MF_PATCH_URL }}"
          
          if [ "${{ env.PATCH_TYPE }}" = "fix_wine9_2_mfplat" ]; then
            chmod +x mf_patch
            # 保存补丁脚本，将在构建过程中应用
            mv mf_patch fix_wine9.2_mfplat.sh
          else
            # 保存补丁文件
            mv mf_patch wine_do_not_create_dxgi_manager2.patch
          fi

      - name: Build Wine with custom script
        env:
          TERMUX_GLIBC: true
          EXPERIMENTAL_WOW64: true
          USE_CCACHE: true
          WINE_VERSION: ${{ env.WINE_VERSION }}
          WINE_BRANCH: ${{ env.WINE_BRANCH }}
          STAGING_VERSION: v${{ env.WINE_VERSION }}
        run: |
          chmod +x build_wine.sh
          
          # 复制 MF 补丁到脚本目录
          if [ -f "fix_wine9.2_mfplat.sh" ]; then
            cp fix_wine9.2_mfplat.sh build_wine.sh ./
          fi
          if [ -f "wine_do_not_create_dxgi_manager2.patch" ]; then
            cp wine_do_not_create_dxgi_manager2.patch build_wine.sh ./
          fi
          
          # 运行构建脚本
          ./build_wine.sh

      - name: Apply additional patches post-build
        if: env.PATCH_TYPE == 'wine_do_not_create_dxgi_manager2'
        run: |
          echo "应用 9.10+ MF 补丁到已构建的 Wine..."
          # 这里假设构建脚本在 BUILD_DIR 中留下了 Wine 源码
          if [ -f "wine_do_not_create_dxgi_manager2.patch" ] && [ -d "wine" ]; then
            cd wine
            patch -p1 < ../wine_do_not_create_dxgi_manager2.patch || echo "补丁可能已部分应用或不需要"
          fi

      - name: Prepare final artifacts
        run: |
          echo "准备最终构建产物..."
          # 查找构建生成的 tar.xz 文件
          find . -name "*.tar.xz" -type f | head -5
          ls -la *.tar.xz || echo "未找到 tar.xz 文件"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wine-${{ env.WINE_VERSION }}-${{ env.WINE_BRANCH }}-wow64
          path: "*.tar.xz"
        if: success()

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.WINE_VERSION }}-${{ env.WINE_BRANCH }}-wow64
          name: Wine ${{ env.WINE_VERSION }} ${{ env.WINE_BRANCH }} (WoW64 for Termux)
          body: |
            # Wine ${{ env.WINE_VERSION }} ${{ env.WINE_BRANCH }} - WoW64 for Termux
            
            ## 构建信息
            - **Wine 版本**: ${{ env.WINE_VERSION }}
            - **分支**: ${{ env.WINE_BRANCH }}
            - **架构**: WoW64 (32位和64位支持)
            - **平台**: Termux (Android)
            - **MF 修复**: ${{ env.PATCH_TYPE }}
            
            ## 特性
            ✓ WoW64 架构支持
            ✓ 针对 Termux 环境优化
            ✓ 应用了必要的兼容性补丁
            ✓ 包含 MF 补丁修复

            ## 使用说明
            1. 下载对应的 tar.xz 文件
            2. 在 Termux 中解压: `tar -xf wine-*.tar.xz -C $PREFIX`
            3. 设置环境变量: `export WINEPREFIX=$HOME/.wine`
            4. 运行: `wine winecfg`

            ## 构建配置
            - 构建时间: ${{ github.event.head_commit.timestamp }}
            - 工作流: ${{ github.workflow }}
            - 提交: ${{ github.sha }}
          files: "*.tar.xz"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print build summary
        run: |
          echo "✅ Wine 构建完成!"
          echo "版本: ${{ env.WINE_VERSION }}"
          echo "分支: ${{ env.WINE_BRANCH }}"
          echo "架构: WoW64"
          echo "MF 修复: ${{ env.PATCH_TYPE }}"
          echo ""
          echo "构建产物已上传到 Release 和 Artifacts"