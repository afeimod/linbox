# build-wine.yml
name: Build Wine (True WOW64 for Termux)

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出源码和补丁
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: 启用多架构支持
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update

    - name: 修复包管理器
      run: |
        sudo apt-get update
        sudo apt-get install -f -y
        sudo apt-get autoremove -y

    - name: 安装基本依赖
      run: |
        sudo apt-get install -y \
          build-essential \
          git \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          meson \
          ninja-build \
          autoconf \
          wget \
          xz-utils

    - name: 安装核心库依赖
      run: |
        sudo apt-get install -y \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev

    - name: 安装32位开发库（用于交叉编译）
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev:i386 \
          libxext-dev:i386 \
          libxi-dev:i386 \
          libxrandr-dev:i386 \
          libxcursor-dev:i386 \
          libxcomposite-dev:i386 \
          libxdamage-dev:i386 \
          libxfixes-dev:i386 \
          libxxf86vm-dev:i386 \
          libxrender-dev:i386 \
          libxinerama-dev:i386 \
          libgl-dev:i386 \
          libglu-dev:i386 \
          libosmesa6-dev:i386 \
          libfreetype6-dev:i386 \
          libfontconfig1-dev:i386 \
          libdbus-1-dev:i386 \
          libasound2-dev:i386 \
          libpulse-dev:i386 \
          libudev-dev:i386 \
          libcups2-dev:i386 \
          libjpeg-dev:i386 \
          libpng-dev:i386 \
          libtiff-dev:i386 \
          libxml2-dev:i386

    - name: 克隆 Wine 源码
      run: |
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        git checkout wine-9.0

    - name: 彻底修复 Termux 路径问题
      run: |
        cd wine
        
        echo "彻底修复 Termux 路径问题..."
        
        # 修改所有硬编码的 /tmp 路径
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        
        # 修改 server 目录中的特定路径
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 修改其他关键文件
        find . -name "file.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "loader.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "server.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        echo "路径修复完成"

    - name: 配置和构建真正的 WOW64 Wine
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建构建目录 - 真正的 WOW64 只需要一个构建目录
        mkdir -p build-wow64
        cd build-wow64

        # 配置真正的 WOW64 Wine
        # 使用 --enable-win64 和 --enable-archs 来构建真正的 WOW64
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --without-dbus \
          --without-gstreamer \
          --without-vulkan \
          --without-mpg123 \
          --without-openal \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland \
          --without-xinerama

        # 构建真正的 WOW64 Wine
        echo "开始构建真正的 WOW64 Wine..."
        make -j$(nproc)

    - name: 安装 Wine 并获取版本信息
      run: |
        cd wine/build-wow64
        # 安装 WOW64 Wine
        make install

        # 获取版本信息
        cd ..
        VERSION=$(git describe --tags --abbrev=0)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine 版本: $VERSION - 真正的 WOW64 构建"

    - name: 验证构建结果
      run: |
        echo "检查安装的文件..."
        find /tmp/wine-install -name "*.so" | head -20
        echo ""
        echo "检查架构..."
        file /tmp/wine-install/bin/wine
        file /tmp/wine-install/bin/wine64
        echo ""
        echo "检查是否存在 i386-unix（不应该存在）..."
        if [ -d "/tmp/wine-install/lib/wine/i386-unix" ]; then
          echo "错误: 发现了 i386-unix 目录，这不是真正的 WOW64 构建"
          ls -la /tmp/wine-install/lib/wine/
          exit 1
        else
          echo "正确: 没有 i386-unix 目录，这是真正的 WOW64 构建"
        fi

    - name: 创建 Termux 包结构
      run: |
        # 创建目录结构
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/bin
        
        # 复制 Wine 安装文件
        echo "复制 Wine 文件..."
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        # 创建 wine 包装脚本
        cat > wine-package/bin/wine << 'EOF'
        #!/bin/bash
        # True WOW64 Wine for Termux 启动脚本
        
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export HOME="$HOME"
        
        # 设置临时目录
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export TEMP="$TMPDIR"
        export TMP="$TMPDIR"
        
        # 确保临时目录存在
        mkdir -p "$TMPDIR" 2>/dev/null
        
        # 设置 Wine 前缀
        if [ -z "$WINEPREFIX" ]; then
            export WINEPREFIX="$HOME/.wine"
        fi
        
        # 确保 Wine 前缀目录存在
        mkdir -p "$WINEPREFIX" 2>/dev/null
        
        # 设置库路径
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib64:$LD_LIBRARY_PATH"
        
        # 设置其他 Wine 相关环境变量
        export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        export WINEARCH="win64"  # WOW64 模式
        
        # 运行真正的 wine 程序（会自动处理 32/64 位）
        exec "$TERMUX_PREFIX/opt/wine/bin/wine" "$@"
        EOF
        
        chmod +x wine-package/bin/wine
        
        # 创建 wineserver 包装脚本
        cat > wine-package/bin/wineserver << 'EOF'
        #!/bin/bash
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export TEMP="$TMPDIR"
        export TMP="$TMPDIR"
        
        mkdir -p "$TMPDIR" 2>/dev/null
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$LD_LIBRARY_PATH"
        export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        
        exec "$TERMUX_PREFIX/opt/wine/bin/wineserver" "$@"
        EOF
        
        chmod +x wine-package/bin/wineserver

    - name: 创建安装脚本
      run: |
        cat > wine-package/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "=========================================="
        echo "   True WOW64 Wine for Termux 安装脚本"
        echo "=========================================="
        
        TERMUX_PREFIX="/data/data/com.termux/files/usr"
        INSTALL_DIR="$TERMUX_PREFIX/opt/wine"
        BIN_DIR="$TERMUX_PREFIX/bin"
        
        # 检查环境
        if [ ! -d "$TERMUX_PREFIX" ]; then
            echo "错误: 这似乎不是 Termux 环境!"
            exit 1
        fi
        
        # 创建目录
        echo "创建目录..."
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$BIN_DIR"
        mkdir -p "$TERMUX_PREFIX/tmp"
        mkdir -p "$HOME/.wine"
        
        # 安装文件
        echo "安装 Wine 文件..."
        cp -r opt/wine/* "$INSTALL_DIR"/
        
        echo "安装启动脚本..."
        cp bin/wine "$BIN_DIR"/
        cp bin/wineserver "$BIN_DIR"/
        
        chmod +x "$BIN_DIR"/wine
        chmod +x "$BIN_DIR"/wineserver
        
        # 配置环境
        echo "配置环境变量..."
        
        if ! grep -q "True WOW64 Wine" "$HOME/.bashrc" 2>/dev/null; then
            cat >> "$HOME/.bashrc" << 'EOL'

            export TERMUX_PREFIX="/data/data/com.termux/files/usr"
            export WINEPREFIX="$HOME/.wine"
            export WINEARCH="win64"  # WOW64 模式
            export PATH="$PATH:$TERMUX_PREFIX/opt/wine/bin"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64"
            export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
            export TMPDIR="$TERMUX_PREFIX/tmp"
            export TEMP="$TMPDIR"
            export TMP="$TMPDIR"
            # ==========================================
            EOL
        fi
        
        echo ""
        echo "=========================================="
        echo "   True WOW64 Wine 安装完成!"
        echo "=========================================="
        echo ""
        echo "特性:"
        echo "✓ 真正的 WOW64 架构"
        echo "✓ 同时支持 32 位和 64 位 Windows 应用程序"
        echo "✓ 无需单独的 32 位 Unix 库"
        echo ""
        echo "使用方法:"
        echo "1. 重新启动 Termux 或运行: source ~/.bashrc"
        echo "2. 初始化: wine wineboot"
        echo "3. 运行 32 位应用: wine app32.exe"
        echo "4. 运行 64 位应用: wine app64.exe"
        echo ""
        echo "注意: 这是真正的 WOW64 构建，不是传统的交叉编译!"
        echo "=========================================="
        EOF
        
        chmod +x wine-package/install.sh

    - name: 创建打包文件
      run: |
        echo "最终文件结构:"
        find wine-package -type f | sort
        echo ""
        echo "检查 Wine 二进制文件:"
        file wine-package/opt/wine/bin/wine*
        
        # 打包
        tar -czf wine-${{ env.VERSION }}-true-wow64-termux.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh wine-${{ env.VERSION }}-true-wow64-termux.tar.gz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.VERSION }}-true-wow64-termux
        path: wine-${{ env.VERSION }}-true-wow64-termux.tar.gz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Wine ${{ env.VERSION }} (True WOW64 for Termux)
        files: wine-${{ env.VERSION }}-true-wow64-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息和使用说明
      run: |
        echo "✅ True WOW64 Wine 构建完成"
        echo "版本号: $VERSION"
        echo "架构: x86_64 True WOW64"
        echo "环境: Termux"
        echo ""
        echo "特性:"
        echo "✓ 单一二进制文件支持 32/64 位应用"
        echo "✓ 无需 i386-unix 目录"
        echo "✓ 真正的 WOW64 架构"
        echo ""
        echo "使用说明:"
        echo "1. 下载 wine-$VERSION-true-wow64-termux.tar.gz"
        echo "2. 解压: tar -xzf wine-$VERSION-true-wow64-termux.tar.gz"
        echo "3. 进入目录: cd wine-package"
        echo "4. 运行安装: ./install.sh"
        echo "5. 重新加载环境: source ~/.bashrc"
        echo "6. 初始化: wine wineboot"
        echo ""
        echo "测试:"
        echo "- wine notepad (32位应用)"
        echo "- wine64 notepad (64位应用)"