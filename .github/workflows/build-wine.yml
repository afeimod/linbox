# build-wine.yml
name: Build Wine (x86_64 with WOW64 for Termux)

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出源码和补丁
      uses: actions/checkout@v4
      with:
        path: scripts

    - name: 启用多架构支持
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update

    - name: 修复包管理器
      run: |
        sudo apt-get update
        sudo apt-get install -f -y
        sudo apt-get autoremove -y

    - name: 安装基本依赖
      run: |
        sudo apt-get install -y \
          build-essential \
          git \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          meson \
          ninja-build \
          autoconf \
          wget \
          xz-utils \
          bubblewrap

    - name: 安装核心库依赖
      run: |
        sudo apt-get install -y \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev

    - name: 安装32位核心依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev:i386 \
          libxext-dev:i386 \
          libxi-dev:i386 \
          libxrandr-dev:i386 \
          libxcursor-dev:i386 \
          libxcomposite-dev:i386 \
          libxdamage-dev:i386 \
          libxfixes-dev:i386 \
          libxxf86vm-dev:i386 \
          libxrender-dev:i386 \
          libxinerama-dev:i386 \
          libgl-dev:i386 \
          libglu-dev:i386 \
          libosmesa6-dev:i386 \
          libfreetype6-dev:i386 \
          libfontconfig1-dev:i386 \
          libdbus-1-dev:i386 \
          libasound2-dev:i386 \
          libpulse-dev:i386 \
          libudev-dev:i386 \
          libcups2-dev:i386 \
          libjpeg-dev:i386 \
          libpng-dev:i386 \
          libtiff-dev:i386 \
          libxml2-dev:i386

    - name: 克隆 Wine 源码
      run: |
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        git checkout wine-9.0

    - name: 应用 Termux 补丁
      run: |
        cd wine
        
        # 应用路径修复补丁（基于你的 shell 脚本中的逻辑）
        echo "应用 Termux 路径修复补丁..."
        
        # 修改所有硬编码的 /tmp 路径
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 特别处理 server 目录
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp/\.wine|"/data/data/com.termux/files/usr/tmp/\.wine|g' {} +
        
        # 应用其他必要的补丁（如果有的话）
        if [ -f ../scripts/pathfix.patch ]; then
          patch -p1 < ../scripts/pathfix.patch || echo "pathfix.patch 可能不适用，继续..."
        fi
        
        if [ -f ../scripts/termux-wine-fix.patch ]; then
          patch -p1 < ../scripts/termux-wine-fix.patch || echo "termux-wine-fix.patch 可能不适用，继续..."
        fi

    - name: 配置和构建 Wine (64位)
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建64位构建目录
        mkdir -p build64
        cd build64

        # 配置64位 Wine，使用与 shell 脚本相似的选项
        ../configure \
          --enable-win64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --without-dbus \
          --without-gstreamer \
          --without-vulkan \
          --without-mpg123 \
          --without-openal \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland \
          --without-xinerama

        # 构建64位 Wine
        make -j$(nproc)

    - name: 配置和构建 Wine (32位 WOW64)
      run: |
        cd wine
        # 创建32位构建目录
        mkdir -p build32
        cd build32

        # 配置32位 Wine，链接到64位构建
        ../configure \
          --with-wine64=../build64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --without-dbus \
          --without-gstreamer \
          --without-vulkan \
          --without-mpg123 \
          --without-openal \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland \
          --without-xinerama

        # 构建32位 Wine
        make -j$(nproc)

    - name: 安装 Wine 并获取版本信息
      run: |
        cd wine
        # 安装64位和32位
        cd build64 && make install
        cd ../build32 && make install

        # 获取版本信息
        VERSION=$(git describe --tags --abbrev=0)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine 版本: $VERSION"

    - name: 创建 Termux 专用的启动脚本
      run: |
        # 创建安装目录结构
        mkdir -p wine-package/opt/wine
        
        # 复制 Wine 安装文件
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        # 创建 Termux 专用的启动脚本
        cat > wine-package/bin/wine << 'EOF'
        #!/bin/bash
        # Termux Wine 启动脚本
        
        # 设置 Termux 环境变量
        export HOME=$HOME
        export TMPDIR=/data/data/com.termux/files/usr/tmp
        export TEMP=/data/data/com.termux/files/usr/tmp
        export TMP=/data/data/com.termux/files/usr/tmp
        
        # 确保必要的目录存在
        mkdir -p $TMPDIR 2>/dev/null
        mkdir -p $HOME/.wine 2>/dev/null
        
        # 设置 WINEPREFIX
        if [ -z "$WINEPREFIX" ]; then
          export WINEPREFIX="$HOME/.wine"
        fi
        
        # 设置库路径
        export LD_LIBRARY_PATH="/data/data/com.termux/files/usr/opt/wine/lib:$LD_LIBRARY_PATH"
        
        # 运行 wine
        exec /data/data/com.termux/files/usr/opt/wine/bin/wine "$@"
        EOF
        
        chmod +x wine-package/bin/wine
        
        # 创建 wineserver 启动脚本
        cat > wine-package/bin/wineserver << 'EOF'
        #!/bin/bash
        # Termux WineServer 启动脚本
        
        export TMPDIR=/data/data/com.termux/files/usr/tmp
        export TEMP=/data/data/com.termux/files/usr/tmp
        export TMP=/data/data/com.termux/files/usr/tmp
        
        mkdir -p $TMPDIR 2>/dev/null
        export LD_LIBRARY_PATH="/data/data/com.termux/files/usr/opt/wine/lib:$LD_LIBRARY_PATH"
        
        exec /data/data/com.termux/files/usr/opt/wine/bin/wineserver "$@"
        EOF
        
        chmod +x wine-package/bin/wineserver

    - name: 创建安装脚本
      run: |
        cat > wine-package/install-wine.sh << 'EOF'
        #!/bin/bash
        echo "正在安装 Wine for Termux..."
        
        # 安装目录
        INSTALL_DIR="/data/data/com.termux/files/usr/opt/wine"
        
        # 创建安装目录
        mkdir -p $INSTALL_DIR
        mkdir -p /data/data/com.termux/files/usr/tmp
        mkdir -p $HOME/.wine
        
        # 复制文件
        echo "复制 Wine 文件..."
        cp -r opt/wine/* $INSTALL_DIR/
        cp -r bin/* /data/data/com.termux/files/usr/bin/
        
        chmod +x wine-package/install-wine.sh

    - name: 创建打包文件
      run: |
        # 打包
        tar -czf wine-${{ env.VERSION }}-x86_64-wow64-termux.tar.gz wine-package/
        
        # 显示文件信息
        ls -la wine-${{ env.VERSION }}-x86_64-wow64-termux.tar.gz
        echo "打包文件创建完成"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.VERSION }}-x86_64-wow64-termux
        path: wine-${{ env.VERSION }}-x86_64-wow64-termux.tar.gz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Wine ${{ env.VERSION }} (x86_64 with WOW64 for Termux)
        files: wine-${{ env.VERSION }}-x86_64-wow64-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息和使用说明
      run: |
        echo "✅ Wine 构建完成"
        echo "版本号: $VERSION"
        echo "架构: x86_64 with WOW64"
        echo "环境: Termux"
        echo ""
        echo "使用说明:"
        echo "1. 下载并解压 wine-$VERSION-x86_64-wow64-termux.tar.gz"
        echo "2. 进入解压后的目录"
        echo "3. 运行安装脚本: ./install-wine.sh"
        echo "4. 重新加载环境: source ~/.bashrc"
        echo "5. 初始化 Wine: wine wineboot"
        echo ""
        echo "注意:"
        echo "- 已修改 Wine 源码中的临时路径为 Termux 路径"
        echo "- 包含专用的启动脚本解决路径问题"
        echo "- 构建禁用了不必要的功能以减小体积"