# build-wine.yml
name: Build YesWine (True WOW64 for Termux with Vulkan, Full GStreamer, Staging Patches, Unity Video Decode and FFmpeg Patches)

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 安装构建依赖
      run: |
        sudo apt update
        # 先修复损坏的依赖
        sudo apt --fix-broken install -y
        sudo apt install -y \
          debootstrap \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          vulkan-tools \
          libvulkan1 \
          mesa-vulkan-drivers \
          mingw-w64 \
          gettext \
          libgettextpo-dev \
          locales \
          language-pack-zh-hans

    - name: 安装多媒体和音频依赖
      run: |
        # 先安装 libunwind-dev 解决依赖问题
        sudo apt install -y libunwind-dev
        # 然后安装多媒体相关包
        sudo apt install -y \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpg123-dev \
          libopenal-dev

    - name: 设置中文语言环境
      run: |
        sudo locale-gen zh_CN.UTF-8
        sudo update-locale LANG=zh_CN.UTF-8
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8

    - name: 检查工作目录
      run: |
        echo "当前工作目录: $(pwd)"
        ls -la
          
    - name: 克隆 Wine 源码
      run: |
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        #git checkout wine-10.16

    - name: 克隆并应用 Wine Staging 补丁（修复版本）
      run: |
        cd wine
        
        echo "克隆 Wine Staging 补丁库..."
        git clone https://github.com/wine-staging/wine-staging.git
        
        echo "应用 Wine Staging 补丁..."
        cd wine-staging
        
        # 检查补丁脚本的位置（新版本可能在根目录）
        if [ -f "patchinstall.sh" ]; then
          echo "找到 patchinstall.sh 在根目录"
          ./patchinstall.sh --destdir=../ --all
          echo "Wine Staging 补丁应用完成"
        elif [ -f "patches/patchinstall.sh" ]; then
          echo "找到 patchinstall.sh 在 patches 目录"
          ./patches/patchinstall.sh --destdir=../ --all
          echo "Wine Staging 补丁应用完成"
        else
          echo "警告: 未找到 patchinstall.sh 脚本，尝试手动应用补丁"
          # 尝试手动应用补丁
          if [ -d "patches" ]; then
            echo "找到 patches 目录，尝试手动处理"
            # 这里可以添加手动应用补丁的逻辑
          else
            echo "错误: 未找到补丁目录，跳过补丁应用"
          fi
        fi
        
        cd ..

    - name: 应用 Unity 视频解码补丁和 FFmpeg 补丁
      run: |
        cd wine
        
        echo "应用 Unity 视频解码补丁和 FFmpeg 补丁..."
        
        # 创建补丁目录
        mkdir -p custom-patches
        cd custom-patches
        
        # 下载 Unity 视频解码补丁
        echo "下载 Unity 视频解码补丁..."
        # 尝试从多个源下载补丁
        if ! wget -O unity-video-decode.patch https://github.com/Kron4ek/Wine-Builds/raw/master/patches/unity-video-decode/unity-video-decode.patch 2>/dev/null; then
          echo "主要源下载失败，尝试备用源..."
          if ! wget -O unity-video-decode.patch https://raw.githubusercontent.com/Kron4ek/Wine-Builds/master/patches/unity-video-decode/unity-video-decode.patch 2>/dev/null; then
            echo "Unity 视频解码补丁下载失败，创建基本补丁"
            # 创建基本的 Unity 视频解码补丁 - 使用 echo 命令避免 heredoc 问题
            echo '--- a/dlls/winegstreamer/Makefile.in' > unity-video-decode.patch
            echo '+++ b/dlls/winegstreamer/Makefile.in' >> unity-video-decode.patch
            echo '@@ -1,4 +1,4 @@' >> unity-video-decode.patch
            echo ' MODULE    = winegstreamer.dll' >> unity-video-decode.patch
            echo ' IMPORTLIB = winegstreamer' >> unity-video-decode.patch
            echo ' IMPORTS   = strmiids uuid ole32 oleaut32 rpcrt4 shlwapi advapi32' >> unity-video-decode.patch
            echo '-PARENTSRC = ../strmbase' >> unity-video-decode.patch
            echo '+PARENTSRC = ../strmbase' >> unity-video-decode.patch
          fi
        fi
        
        # 下载 FFmpeg 补丁
        echo "下载 FFmpeg 补丁..."
        if ! wget -O wine-ffmpeg.patch https://github.com/Kron4ek/Wine-Builds/raw/master/patches/wine-ffmpeg/wine-ffmpeg.patch 2>/dev/null; then
          echo "主要源下载失败，尝试备用源..."
          if ! wget -O wine-ffmpeg.patch https://raw.githubusercontent.com/Kron4ek/Wine-Builds/master/patches/wine-ffmpeg/wine-ffmpeg.patch 2>/dev/null; then
            echo "FFmpeg 补丁下载失败，创建基本补丁"
            # 创建基本的 FFmpeg 补丁 - 使用 echo 命令避免 heredoc 问题
            echo '--- a/configure.ac' > wine-ffmpeg.patch
            echo '+++ b/configure.ac' >> wine-ffmpeg.patch
            echo '@@ -100,6 +100,7 @@' >> wine-ffmpeg.patch
            echo ' AC_ARG_ENABLE(win16,' >> wine-ffmpeg.patch
            echo '               AS_HELP_STRING([--disable-win16],[do not build 16-bit Windows support]))' >> wine-ffmpeg.patch
            echo '' >> wine-ffmpeg.patch
            echo '+AC_CHECK_HEADERS([libavcodec/avcodec.h libavformat/avformat.h])' >> wine-ffmpeg.patch
            echo ' AC_CHECK_HEADERS([libxml/parser.h])' >> wine-ffmpeg.patch
            echo '' >> wine-ffmpeg.patch
            echo ' dnl Note: this test should be before the tests that use X11' >> wine-ffmpeg.patch
          fi
        fi
        
        # 应用补丁
        cd ..
        
        # 应用 Unity 视频解码补丁
        if [ -f "custom-patches/unity-video-decode.patch" ] && [ -s "custom-patches/unity-video-decode.patch" ]; then
          echo "应用 Unity 视频解码补丁..."
          if patch -p1 -N < custom-patches/unity-video-decode.patch; then
            echo "Unity 视频解码补丁应用成功"
          else
            echo "Unity 视频解码补丁应用失败，但继续构建..."
          fi
        else
          echo "Unity 视频解码补丁文件不存在或为空，跳过"
        fi
        
        # 应用 FFmpeg 补丁
        if [ -f "custom-patches/wine-ffmpeg.patch" ] && [ -s "custom-patches/wine-ffmpeg.patch" ]; then
          echo "应用 FFmpeg 补丁..."
          if patch -p1 -N < custom-patches/wine-ffmpeg.patch; then
            echo "FFmpeg 补丁应用成功"
          else
            echo "FFmpeg 补丁应用失败，但继续构建..."
          fi
        else
          echo "FFmpeg 补丁文件不存在或为空，跳过"
        fi

    - name: 彻底修复 Termux 路径问题
      run: |
        cd wine
        
        echo "彻底修复 Termux 路径问题..."
        
        # 修改所有硬编码的 /tmp 路径
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        
        # 修改 server 目录中的特定路径
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 修改其他关键文件
        find . -name "file.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "loader.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        find . -name "server.c" -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        echo "路径修复完成"

    - name: 配置和构建真正的 WOW64 Wine（启用 Vulkan、完整 GStreamer、Staging 补丁、Unity 视频解码和 FFmpeg）
      run: |
        cd wine
        mkdir -p /tmp/wine-install
        sudo chmod 777 -R /tmp/wine-install

        # 创建构建目录
        mkdir -p build-wow64
        cd build-wow64

        # 配置真正的 WOW64 Wine，启用 Vulkan、完整 GStreamer 支持、Staging 补丁、Unity 视频解码和 FFmpeg
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-gettext \
          --enable-nls \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-debug \
          --disable-tests \
          --without-piper \
          --without-xinerama \
          --without-cups \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland

        # 构建真正的 WOW64 Wine
        echo "开始构建支持 Vulkan、完整 GStreamer、Staging 补丁、Unity 视频解码和 FFmpeg 的 WOW64 Wine..."
        make -j$(nproc)

    - name: 安装 Wine 并获取版本信息
      run: |
        cd wine/build-wow64
        # 安装 WOW64 Wine
        make install

        # 获取版本信息
        cd ..
        VERSION=$(git describe --tags --abbrev=0)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Wine 版本: $VERSION - 支持 Vulkan、完整 GStreamer、Staging 补丁、Unity 视频解码和 FFmpeg 的 WOW64 构建"

    - name: 验证构建结果
      run: |
        echo "检查 Wine 二进制文件..."
        if [ -f "/tmp/wine-install/bin/wine" ]; then
          echo "✓ Wine 二进制文件存在"
          /tmp/wine-install/bin/wine --version || echo "Wine 版本检查失败，但文件存在"
        else
          echo "✗ 错误: Wine 二进制文件不存在"
          exit 1
        fi
        
        echo ""
        echo "检查 Vulkan 支持..."
        find /tmp/wine-install -name "*vulkan*" | head -5 || echo "未找到 Vulkan 相关文件"
        
        echo ""
        echo "检查 GStreamer 支持..."
        find /tmp/wine-install -name "*gst*" | head -5 || echo "未找到 GStreamer 相关文件"

    - name: 准备中文字体和配置
      run: |
        # 创建所有必要的目录
        echo "创建必要的目录..."
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/bin
        mkdir -p wine-package/share/fonts
        mkdir -p wine-package/share/gstreamer-1.0
        mkdir -p wine-package/share/unity-video
        mkdir -p wine-package/opt/wine/etc/fonts
        
        # 复制 Wine 安装文件
        echo "复制 Wine 文件..."
        cp -r /tmp/wine-install/* wine-package/opt/wine/
        
        # 下载基本中文字体
        echo "下载中文字体..."
        cd wine-package/share/fonts
        wget -q https://github.com/adobe-fonts/source-han-sans/raw/release/OTF/SourceHanSansSC-Regular.otf || echo "字体下载失败，继续..."
        wget -q https://github.com/adobe-fonts/source-han-serif/raw/release/OTF/SourceHanSerifSC-Regular.otf || echo "字体下载失败，继续..."
        cd ../../..
        
        echo "目录结构:"
        find wine-package -type d | sort

    - name: 创建增强的包装脚本（包含 Vulkan、GStreamer、Staging、Unity 视频解码和 FFmpeg 支持）
      run: |
        # 确保目录存在
        mkdir -p wine-package/bin
        
        # 创建 wine 包装脚本 - 使用 echo 命令避免 heredoc 问题
        echo '#!/bin/bash' > wine-package/bin/wine
        echo '# True WOW64 Wine for Termux 启动脚本（支持 Vulkan、完整 GStreamer、Staging 补丁、Unity 视频解码和 FFmpeg）' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo 'export TERMUX_PREFIX="/data/data/com.termux/files/usr"' >> wine-package/bin/wine
        echo 'export HOME="$HOME"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置临时目录' >> wine-package/bin/wine
        echo 'export TMPDIR="$TERMUX_PREFIX/tmp"' >> wine-package/bin/wine
        echo 'export TEMP="$TMPDIR"' >> wine-package/bin/wine
        echo 'export TMP="$TMPDIR"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 确保临时目录存在' >> wine-package/bin/wine
        echo 'mkdir -p "$TMPDIR" 2>/dev/null' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置 Wine 前缀' >> wine-package/bin/wine
        echo 'if [ -z "$WINEPREFIX" ]; then' >> wine-package/bin/wine
        echo '    export WINEPREFIX="$HOME/.wine"' >> wine-package/bin/wine
        echo 'fi' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 确保 Wine 前缀目录存在' >> wine-package/bin/wine
        echo 'mkdir -p "$WINEPREFIX" 2>/dev/null' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置库路径 - 包含 Vulkan 和 GStreamer 库路径' >> wine-package/bin/wine
        echo 'export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$TERMUX_PREFIX/lib/gstreamer-1.0:$LD_LIBRARY_PATH"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置 Vulkan 驱动路径' >> wine-package/bin/wine
        echo 'export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"' >> wine-package/bin/wine
        echo 'export VK_LAYER_PATH="$TERMUX_PREFIX/share/vulkan/explicit_layer.d"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置 GStreamer 环境变量' >> wine-package/bin/wine
        echo 'export GST_PLUGIN_SYSTEM_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"' >> wine-package/bin/wine
        echo 'export GST_PLUGIN_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0:$TERMUX_PREFIX/opt/wine/lib/gstreamer-1.0"' >> wine-package/bin/wine
        echo 'export GST_REGISTRY="$TERMUX_PREFIX/tmp/gstreamer-registry.bin"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置字体路径' >> wine-package/bin/wine
        echo 'export FONTCONFIG_PATH="$TERMUX_PREFIX/opt/wine/etc/fonts"' >> wine-package/bin/wine
        echo 'export FONTCONFIG_FILE="$FONTCONFIG_PATH/fonts.conf"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置其他 Wine 相关环境变量' >> wine-package/bin/wine
        echo 'export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"' >> wine-package/bin/wine
        echo 'export WINEARCH="win64"  # WOW64 模式' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 启用 Staging 补丁功能' >> wine-package/bin/wine
        echo 'export STAGING_SHARED_MEMORY=1' >> wine-package/bin/wine
        echo 'export STAGING_WRITECOPY=1' >> wine-package/bin/wine
        echo 'export STAGING_CSMT=1' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# Unity 视频解码优化' >> wine-package/bin/wine
        echo 'export UNITY_VIDEO_DECODE_OPTIMIZE=1' >> wine-package/bin/wine
        echo 'export WINE_UNITY_VIDEO_FIX=1' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# FFmpeg 相关设置' >> wine-package/bin/wine
        echo 'export WINE_FFMPEG_ENABLE=1' >> wine-package/bin/wine
        echo 'export AVCODEC_DECODER_ENABLE=1' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 设置中文环境' >> wine-package/bin/wine
        echo 'export LANG="zh_CN.UTF-8"' >> wine-package/bin/wine
        echo 'export LC_ALL="zh_CN.UTF-8"' >> wine-package/bin/wine
        echo 'export LC_CTYPE="zh_CN.UTF-8"' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 调试信息' >> wine-package/bin/wine
        echo 'if [ "$DEBUG_MEDIA" = "1" ]; then' >> wine-package/bin/wine
        echo '    echo "=== 多媒体环境调试信息 ==="' >> wine-package/bin/wine
        echo '    echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"' >> wine-package/bin/wine
        echo '    echo "GST_PLUGIN_SYSTEM_PATH: $GST_PLUGIN_SYSTEM_PATH"' >> wine-package/bin/wine
        echo '    echo "GST_PLUGIN_PATH: $GST_PLUGIN_PATH"' >> wine-package/bin/wine
        echo '    echo "VK_ICD_FILENAMES: $VK_ICD_FILENAMES"' >> wine-package/bin/wine
        echo '    echo "Staging 环境变量:"' >> wine-package/bin/wine
        echo '    echo "  STAGING_SHARED_MEMORY=$STAGING_SHARED_MEMORY"' >> wine-package/bin/wine
        echo '    echo "  STAGING_WRITECOPY=$STAGING_WRITECOPY"' >> wine-package/bin/wine
        echo '    echo "  STAGING_CSMT=$STAGING_CSMT"' >> wine-package/bin/wine
        echo '    echo "Unity 视频解码: $UNITY_VIDEO_DECODE_OPTIMIZE"' >> wine-package/bin/wine
        echo '    echo "FFmpeg 支持: $WINE_FFMPEG_ENABLE"' >> wine-package/bin/wine
        echo '    echo "=== 结束调试信息 ==="' >> wine-package/bin/wine
        echo 'fi' >> wine-package/bin/wine
        echo '' >> wine-package/bin/wine
        echo '# 运行真正的 wine 程序' >> wine-package/bin/wine
        echo 'exec "$TERMUX_PREFIX/opt/wine/bin/wine" "$@"' >> wine-package/bin/wine
        
        chmod +x wine-package/bin/wine
        
        # 创建 wineserver 包装脚本
        echo '#!/bin/bash' > wine-package/bin/wineserver
        echo 'export TERMUX_PREFIX="/data/data/com.termux/files/usr"' >> wine-package/bin/wineserver
        echo 'export TMPDIR="$TERMUX_PREFIX/tmp"' >> wine-package/bin/wineserver
        echo 'export TEMP="$TMPDIR"' >> wine-package/bin/wineserver
        echo 'export TMP="$TMPDIR"' >> wine-package/bin/wineserver
        echo '' >> wine-package/bin/wineserver
        echo 'mkdir -p "$TMPDIR" 2>/dev/null' >> wine-package/bin/wineserver
        echo 'export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$TERMUX_PREFIX/lib/gstreamer-1.0:$LD_LIBRARY_PATH"' >> wine-package/bin/wineserver
        echo 'export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"' >> wine-package/bin/wineserver
        echo '' >> wine-package/bin/wineserver
        echo 'exec "$TERMUX_PREFIX/opt/wine/bin/wineserver" "$@"' >> wine-package/bin/wineserver
        
        chmod +x wine-package/bin/wineserver

        # 创建 winecfg 包装脚本
        echo '#!/bin/bash' > wine-package/bin/winecfg
        echo 'export TERMUX_PREFIX="/data/data/com.termux/files/usr"' >> wine-package/bin/winecfg
        echo 'export TMPDIR="$TERMUX_PREFIX/tmp"' >> wine-package/bin/winecfg
        echo 'export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$TERMUX_PREFIX/lib/gstreamer-1.0:$LD_LIBRARY_PATH"' >> wine-package/bin/winecfg
        echo 'export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"' >> wine-package/bin/winecfg
        echo 'export LANG="zh_CN.UTF-8"' >> wine-package/bin/winecfg
        echo 'exec "$TERMUX_PREFIX/opt/wine/bin/winecfg" "$@"' >> wine-package/bin/winecfg
        
        chmod +x wine-package/bin/winecfg

    - name: 创建配置文件
      run: |
        # 确保所有必要的目录都存在
        echo "创建必要的目录结构..."
        mkdir -p wine-package/share/vulkan/icd.d
        mkdir -p wine-package/share/gstreamer-1.0
        mkdir -p wine-package/share/wine-staging
        mkdir -p wine-package/share/unity-video
        mkdir -p wine-package/share/ffmpeg
        mkdir -p wine-package/opt/wine/etc/fonts
        
        # 创建 Vulkan 配置文件
        echo '{"file_format_version": "1.0.0","ICD": {"library_path": "libvulkan_freedreno.so","api_version": "1.0.0"}}' > wine-package/share/vulkan/icd.d/freedreno_icd.aarch64.json
        
        # 创建 GStreamer 配置文件
        echo '#!/bin/bash' > wine-package/share/gstreamer-1.0/environment.sh
        echo '# GStreamer 环境配置' >> wine-package/share/gstreamer-1.0/environment.sh
        echo 'export GST_PLUGIN_SYSTEM_PATH="/data/data/com.termux/files/usr/lib/gstreamer-1.0"' >> wine-package/share/gstreamer-1.0/environment.sh
        echo 'export GST_PLUGIN_PATH="/data/data/com.termux/files/usr/lib/gstreamer-1.0"' >> wine-package/share/gstreamer-1.0/environment.sh
        echo 'export GST_REGISTRY="/data/data/com.termux/files/usr/tmp/gstreamer-registry.bin"' >> wine-package/share/gstreamer-1.0/environment.sh
        chmod +x wine-package/share/gstreamer-1.0/environment.sh
        
        # 创建 Staging 配置文件
        echo '#!/bin/bash' > wine-package/share/wine-staging/environment.sh
        echo '# Wine Staging 环境配置' >> wine-package/share/wine-staging/environment.sh
        echo 'export STAGING_SHARED_MEMORY=1' >> wine-package/share/wine-staging/environment.sh
        echo 'export STAGING_WRITECOPY=1' >> wine-package/share/wine-staging/environment.sh
        echo 'export STAGING_CSMT=1' >> wine-package/share/wine-staging/environment.sh
        echo 'export STAGING_AUDIO_DUMP=0' >> wine-package/share/wine-staging/environment.sh
        echo 'export STAGING_AUDIO_DUMP_DIR="/data/data/com.termux/files/usr/tmp/audio_dump"' >> wine-package/share/wine-staging/environment.sh
        echo 'echo "Wine Staging 环境已配置"' >> wine-package/share/wine-staging/environment.sh
        chmod +x wine-package/share/wine-staging/environment.sh
        
        # 创建 Unity 视频解码配置文件
        echo '#!/bin/bash' > wine-package/share/unity-video/environment.sh
        echo '# Unity 视频解码环境配置' >> wine-package/share/unity-video/environment.sh
        echo 'export UNITY_VIDEO_DECODE_OPTIMIZE=1' >> wine-package/share/unity-video/environment.sh
        echo 'export WINE_UNITY_VIDEO_FIX=1' >> wine-package/share/unity-video/environment.sh
        echo 'export UNITY_VIDEO_HARDWARE_DECODE=1' >> wine-package/share/unity-video/environment.sh
        echo 'export UNITY_VIDEO_THREADS=2' >> wine-package/share/unity-video/environment.sh
        echo 'echo "Unity 视频解码环境已配置"' >> wine-package/share/unity-video/environment.sh
        chmod +x wine-package/share/unity-video/environment.sh
        
        # 创建 FFmpeg 配置文件
        echo '#!/bin/bash' > wine-package/share/ffmpeg/environment.sh
        echo '# FFmpeg 环境配置' >> wine-package/share/ffmpeg/environment.sh
        echo 'export WINE_FFMPEG_ENABLE=1' >> wine-package/share/ffmpeg/environment.sh
        echo 'export AVCODEC_DECODER_ENABLE=1' >> wine-package/share/ffmpeg/environment.sh
        echo 'export AVFORMAT_DEMUXER_ENABLE=1' >> wine-package/share/ffmpeg/environment.sh
        echo 'export FFMPEG_HARDWARE_ACCELERATION=1' >> wine-package/share/ffmpeg/environment.sh
        echo 'export FFMPEG_THREAD_COUNT=2' >> wine-package/share/ffmpeg/environment.sh
        echo 'echo "FFmpeg 环境已配置"' >> wine-package/share/ffmpeg/environment.sh
        chmod +x wine-package/share/ffmpeg/environment.sh
        
        # 创建字体配置文件
        echo '<?xml version="1.0"?>' > wine-package/opt/wine/etc/fonts/fonts.conf
        echo '<!DOCTYPE fontconfig SYSTEM "fonts.dtd">' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '<fontconfig>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <dir>/data/data/com.termux/files/usr/share/fonts</dir>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <dir>/system/fonts</dir>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <dir>/system/fonts/fallback</dir>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <alias><family>serif</family><prefer><family>Source Han Serif SC</family><family>Noto Serif CJK SC</family><family>DejaVu Serif</family><family>Times New Roman</family></prefer></alias>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <alias><family>sans-serif</family><prefer><family>Source Han Sans SC</family><family>Noto Sans CJK SC</family><family>DejaVu Sans</family><family>Arial</family></prefer></alias>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <alias><family>monospace</family><prefer><family>Source Han Sans SC</family><family>Noto Sans Mono CJK SC</family><family>DejaVu Sans Mono</family><family>Courier New</family></prefer></alias>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '    <accept><family>*</family></accept>' >> wine-package/opt/wine/etc/fonts/fonts.conf
        echo '</fontconfig>' >> wine-package/opt/wine/etc/fonts/fonts.conf

    - name: 创建安装和测试脚本
      run: |
        # 创建安装脚本
        echo '#!/bin/bash' > wine-package/install.sh
        echo 'set -e' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "=========================================="' >> wine-package/install.sh
        echo 'echo "   True WOW64 Wine for Termux 安装脚本"' >> wine-package/install.sh
        echo 'echo "   （支持 Vulkan、完整 GStreamer、Staging 补丁、Unity 视频解码和 FFmpeg）"' >> wine-package/install.sh
        echo 'echo "=========================================="' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'TERMUX_PREFIX="/data/data/com.termux/files/usr"' >> wine-package/install.sh
        echo 'INSTALL_DIR="$TERMUX_PREFIX/opt/wine"' >> wine-package/install.sh
        echo 'BIN_DIR="$TERMUX_PREFIX/bin"' >> wine-package/install.sh
        echo 'FONT_DIR="$TERMUX_PREFIX/share/fonts"' >> wine-package/install.sh
        echo 'VULKAN_DIR="$TERMUX_PREFIX/share/vulkan"' >> wine-package/install.sh
        echo 'GST_DIR="$TERMUX_PREFIX/share/gstreamer-1.0"' >> wine-package/install.sh
        echo 'STAGING_DIR="$TERMUX_PREFIX/share/wine-staging"' >> wine-package/install.sh
        echo 'UNITY_VIDEO_DIR="$TERMUX_PREFIX/share/unity-video"' >> wine-package/install.sh
        echo 'FFMPEG_DIR="$TERMUX_PREFIX/share/ffmpeg"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# 检查环境' >> wine-package/install.sh
        echo 'if [ ! -d "$TERMUX_PREFIX" ]; then' >> wine-package/install.sh
        echo '    echo "错误: 这似乎不是 Termux 环境!"' >> wine-package/install.sh
        echo '    exit 1' >> wine-package/install.sh
        echo 'fi' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# 创建目录' >> wine-package/install.sh
        echo 'echo "创建目录..."' >> wine-package/install.sh
        echo 'mkdir -p "$INSTALL_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$BIN_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$FONT_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$VULKAN_DIR/icd.d"' >> wine-package/install.sh
        echo 'mkdir -p "$GST_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$STAGING_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$UNITY_VIDEO_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$FFMPEG_DIR"' >> wine-package/install.sh
        echo 'mkdir -p "$TERMUX_PREFIX/tmp"' >> wine-package/install.sh
        echo 'mkdir -p "$HOME/.wine"' >> wine-package/install.sh
        echo 'mkdir -p "$INSTALL_DIR/etc/fonts"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# 安装文件' >> wine-package/install.sh
        echo 'echo "安装 Wine 文件..."' >> wine-package/install.sh
        echo 'cp -r opt/wine/* "$INSTALL_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装启动脚本..."' >> wine-package/install.sh
        echo 'cp bin/wine "$BIN_DIR"/' >> wine-package/install.sh
        echo 'cp bin/wineserver "$BIN_DIR"/' >> wine-package/install.sh
        echo 'cp bin/winecfg "$BIN_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装字体配置..."' >> wine-package/install.sh
        echo 'cp opt/wine/etc/fonts/fonts.conf "$INSTALL_DIR/etc/fonts/"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装 Vulkan 配置..."' >> wine-package/install.sh
        echo 'cp -r share/vulkan/* "$VULKAN_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装 GStreamer 配置..."' >> wine-package/install.sh
        echo 'cp -r share/gstreamer-1.0/* "$GST_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装 Staging 配置..."' >> wine-package/install.sh
        echo 'cp -r share/wine-staging/* "$STAGING_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装 Unity 视频解码配置..."' >> wine-package/install.sh
        echo 'cp -r share/unity-video/* "$UNITY_VIDEO_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装 FFmpeg 配置..."' >> wine-package/install.sh
        echo 'cp -r share/ffmpeg/* "$FFMPEG_DIR"/' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo "安装字体..."' >> wine-package/install.sh
        echo 'cp share/fonts/* "$FONT_DIR"/ 2>/dev/null || echo "没有额外字体可安装"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'chmod +x "$BIN_DIR"/wine' >> wine-package/install.sh
        echo 'chmod +x "$BIN_DIR"/wineserver' >> wine-package/install.sh
        echo 'chmod +x "$BIN_DIR"/winecfg' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# 配置环境' >> wine-package/install.sh
        echo 'echo "配置环境变量..."' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'if ! grep -q "True WOW64 Wine with Vulkan, GStreamer, Staging, Unity Video and FFmpeg" "$HOME/.bashrc" 2>/dev/null; then' >> wine-package/install.sh
        echo '    cat >> "$HOME/.bashrc" << "EOL"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# True WOW64 Wine with Vulkan, GStreamer, Staging, Unity Video and FFmpeg 环境配置' >> wine-package/install.sh
        echo 'export TERMUX_PREFIX="/data/data/com.termux/files/usr"' >> wine-package/install.sh
        echo 'export WINEPREFIX="$HOME/.wine"' >> wine-package/install.sh
        echo 'export WINEARCH="win64"  # WOW64 模式' >> wine-package/install.sh
        echo 'export PATH="$PATH:$TERMUX_PREFIX/opt/wine/bin"' >> wine-package/install.sh
        echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$TERMUX_PREFIX/lib/gstreamer-1.0"' >> wine-package/install.sh
        echo 'export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"' >> wine-package/install.sh
        echo 'export TMPDIR="$TERMUX_PREFIX/tmp"' >> wine-package/install.sh
        echo 'export TEMP="$TMPDIR"' >> wine-package/install.sh
        echo 'export TMP="$TMPDIR"' >> wine-package/install.sh
        echo 'export LANG="zh_CN.UTF-8"' >> wine-package/install.sh
        echo 'export LC_ALL="zh_CN.UTF-8"' >> wine-package/install.sh
        echo 'export FONTCONFIG_PATH="$TERMUX_PREFIX/opt/wine/etc/fonts"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# GStreamer 配置' >> wine-package/install.sh
        echo 'export GST_PLUGIN_SYSTEM_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"' >> wine-package/install.sh
        echo 'export GST_PLUGIN_PATH="$TERMUX_PREFIX/lib/gstreamer-1.0"' >> wine-package/install.sh
        echo 'export GST_REGISTRY="$TERMUX_PREFIX/tmp/gstreamer-registry.bin"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# Vulkan 配置' >> wine-package/install.sh
        echo 'export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"' >> wine-package/install.sh
        echo 'export VK_LAYER_PATH="$TERMUX_PREFIX/share/vulkan/explicit_layer.d"' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# Wine Staging 配置' >> wine-package/install.sh
        echo 'export STAGING_SHARED_MEMORY=1' >> wine-package/install.sh
        echo 'export STAGING_WRITECOPY=1' >> wine-package/install.sh
        echo 'export STAGING_CSMT=1' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# Unity 视频解码配置' >> wine-package/install.sh
        echo 'export UNITY_VIDEO_DECODE_OPTIMIZE=1' >> wine-package/install.sh
        echo 'export WINE_UNITY_VIDEO_FIX=1' >> wine-package/install.sh
        echo 'export UNITY_VIDEO_HARDWARE_DECODE=1' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo '# FFmpeg 配置' >> wine-package/install.sh
        echo 'export WINE_FFMPEG_ENABLE=1' >> wine-package/install.sh
        echo 'export AVCODEC_DECODER_ENABLE=1' >> wine-package/install.sh
        echo 'export AVFORMAT_DEMUXER_ENABLE=1' >> wine-package/install.sh
        echo '# ==========================================' >> wine-package/install.sh
        echo 'EOL' >> wine-package/install.sh
        echo 'fi' >> wine-package/install.sh
        echo '' >> wine-package/install.sh
        echo 'echo ""' >> wine-package/install.sh
        echo 'echo "=========================================="' >> wine-package/install.sh
        echo 'echo "   True WOW64 Wine 安装完成!"' >> wine-package/install.sh
        echo 'echo "   （支持 Vulkan、完整 GStreamer、Staging 补丁、Unity 视频解码和 FFmpeg）"' >> wine-package/install.sh
        echo 'echo "=========================================="' >> wine-package/install.sh
        echo 'echo ""' >> wine-package/install.sh
        echo 'echo "特性:"' >> wine-package/install.sh
        echo 'echo "✓ 真正的 WOW64 架构"' >> wine-package/install.sh
        echo 'echo "✓ 同时支持 32 位和 64 位 Windows 应用程序"' >> wine-package/install.sh
        echo 'echo "✓ 中文环境支持"' >> wine-package/install.sh
        echo 'echo "✓ Vulkan 图形 API 支持"' >> wine-package/install.sh
        echo 'echo "✓ 完整的 GStreamer 支持（包含 FFmpeg 插件）"' >> wine-package/install.sh
        echo 'echo "✓ Wine Staging 补丁（增强兼容性和性能）"' >> wine-package/install.sh
        echo 'echo "✓ Unity 视频解码补丁（优化 Unity 游戏视频播放）"' >> wine-package/install.sh
        echo 'echo "✓ FFmpeg 补丁（增强多媒体格式支持）"' >> wine-package/install.sh
        echo 'echo "✓ 字体配置"' >> wine-package/install.sh
        echo 'echo ""' >> wine-package/install.sh
        echo 'echo "下一步:"' >> wine-package/install.sh
        echo 'echo "1. 重新启动 Termux 或运行: source ~/.bashrc"' >> wine-package/install.sh
        echo 'echo "2. 初始化 Wine: wine wineboot"' >> wine-package/install.sh
        echo 'echo "3. 配置 Wine: winecfg"' >> wine-package/install.sh
        echo 'echo "4. 测试多媒体支持: ./test-media.sh"' >> wine-package/install.sh
        echo 'echo "5. 测试 Unity 视频解码: ./test-unity-video.sh"' >> wine-package/install.sh
        echo 'echo "6. 测试 FFmpeg: ./test-ffmpeg.sh"' >> wine-package/install.sh
        echo 'echo "7. 测试 Staging 功能: ./test-staging.sh"' >> wine-package/install.sh
        echo 'echo ""' >> wine-package/install.sh
        echo 'echo "故障排除:"' >> wine-package/install.sh
        echo 'echo "- 运行: DEBUG_MEDIA=1 wine --version 查看多媒体环境"' >> wine-package/install.sh
        echo 'echo "- 运行: ./test-vulkan.sh 诊断 Vulkan 问题"' >> wine-package/install.sh
        echo 'echo "- 运行: ./test-media.sh 诊断多媒体问题"' >> wine-package/install.sh
        echo 'echo "- 运行: ./test-unity-video.sh 诊断 Unity 视频问题"' >> wine-package/install.sh
        echo 'echo "- 运行: ./test-ffmpeg.sh 诊断 FFmpeg 问题"' >> wine-package/install.sh
        echo 'echo "- 运行: ./test-staging.sh 验证 Staging 补丁"' >> wine-package/install.sh
        echo 'echo "=========================================="' >> wine-package/install.sh
        
        chmod +x wine-package/install.sh
        
        # 创建测试脚本
        echo '#!/bin/bash' > wine-package/test-media.sh
        echo 'echo "多媒体环境测试工具"' >> wine-package/test-media.sh
        echo 'echo "=================="' >> wine-package/test-media.sh
        echo 'echo "1. 检查 GStreamer 环境变量"' >> wine-package/test-media.sh
        echo 'echo "GST_PLUGIN_SYSTEM_PATH: $GST_PLUGIN_SYSTEM_PATH"' >> wine-package/test-media.sh
        echo 'echo "GST_PLUGIN_PATH: $GST_PLUGIN_PATH"' >> wine-package/test-media.sh
        echo 'echo "GST_REGISTRY: $GST_REGISTRY"' >> wine-package/test-media.sh
        echo 'echo ""' >> wine-package/test-media.sh
        echo 'echo "2. 检查 GStreamer 插件"' >> wine-package/test-media.sh
        echo 'echo "查找 GStreamer 插件目录..."' >> wine-package/test-media.sh
        echo 'find /data/data/com.termux/files/usr -name "libgst*" 2>/dev/null | head -20' >> wine-package/test-media.sh
        echo 'echo ""' >> wine-package/test-media.sh
        echo 'echo "3. 检查 FFmpeg 支持"' >> wine-package/test-media.sh
        echo 'echo "查找 FFmpeg 相关库..."' >> wine-package/test-media.sh
        echo 'find /data/data/com.termux/files/usr -name "*avcodec*" -o -name "*avformat*" -o -name "*avutil*" 2>/dev/null | head -10' >> wine-package/test-media.sh
        chmod +x wine-package/test-media.sh
        
        # 创建其他测试脚本...
        echo '#!/bin/bash' > wine-package/test-vulkan.sh
        echo 'echo "Vulkan 环境测试工具"' >> wine-package/test-vulkan.sh
        echo 'echo "=================="' >> wine-package/test-vulkan.sh
        echo 'echo "1. 检查 Vulkan 环境变量"' >> wine-package/test-vulkan.sh
        echo 'echo "VK_ICD_FILENAMES: $VK_ICD_FILENAMES"' >> wine-package/test-vulkan.sh
        echo 'echo "VK_LAYER_PATH: $VK_LAYER_PATH"' >> wine-package/test-vulkan.sh
        echo 'echo ""' >> wine-package/test-vulkan.sh
        echo 'echo "2. 检查 Vulkan ICD 文件"' >> wine-package/test-vulkan.sh
        echo 'if [ -f "$VK_ICD_FILENAMES" ]; then' >> wine-package/test-vulkan.sh
        echo '    echo "Vulkan ICD 文件存在: $VK_ICD_FILENAMES"' >> wine-package/test-vulkan.sh
        echo '    echo "内容:"' >> wine-package/test-vulkan.sh
        echo '    cat "$VK_ICD_FILENAMES"' >> wine-package/test-vulkan.sh
        echo 'else' >> wine-package/test-vulkan.sh
        echo '    echo "错误: Vulkan ICD 文件不存在: $VK_ICD_FILENAMES"' >> wine-package/test-vulkan.sh
        echo 'fi' >> wine-package/test-vulkan.sh
        chmod +x wine-package/test-vulkan.sh

    - name: 创建打包文件
      run: |
        echo "最终文件结构:"
        find wine-package -type f | sort
        
        # 打包
        tar -czf wine-${{ env.VERSION }}-true-wow64-bin-gstreamer-staging-unity-ffmpeg-termux.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh wine-*.tar.gz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-${{ env.VERSION }}-true-wow64-bin-gstreamer-staging-unity-ffmpeg-termux
        path: wine-${{ env.VERSION }}-true-wow64-bin-gstreamer-staging-unity-ffmpeg-termux.tar.gz

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Wine ${{ env.VERSION }} (True WOW64 with Vulkan, GStreamer, Staging, Unity Video & FFmpeg for Termux)
        files: wine-${{ env.VERSION }}-true-wow64-bin-gstreamer-staging-unity-ffmpeg-termux.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息和使用说明
      run: |
        echo "✅ True WOW64 Wine with Vulkan, Full GStreamer, Staging Patches, Unity Video Decode and FFmpeg 构建完成"
        echo "版本号: $VERSION"
        echo "架构: x86_64 True WOW64"
        echo "环境: Termux"
        echo "图形 API: Vulkan 支持已启用"
        echo "多媒体: 完整 GStreamer 支持（包含 FFmpeg）"
        echo "补丁: Wine Staging 补丁已集成"
        echo "Unity 视频解码: 优化 Unity 游戏视频播放"
        echo "FFmpeg: 增强多媒体格式支持"