# build-wine.yml
name: Build AllWine WOW64 (Exp and Proton)

on:
  workflow_dispatch:  # 只保留手动触发

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

env:
  WINE_VERSION: "latest"
  EXPERIMENTAL_WOW64: "true"
  BUILD_DIR: "/tmp/build_wine"

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 安装构建依赖
      run: |
        sudo apt update
        sudo apt install -y \
          debootstrap \
          perl \
          git \
          wget \
          xz-utils \
          bubblewrap \
          autoconf \
          flex \
          bison \
          gcc-multilib \
          g++-multilib \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxxf86vm-dev \
          libxrender-dev \
          libxinerama-dev \
          libgl-dev \
          libglu-dev \
          libosmesa6-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libpcap-dev \
          libdbus-1-dev \
          libssl-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libcups2-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libxml2-dev \
          libvulkan-dev \
          vulkan-tools \
          libvulkan1 \
          mesa-vulkan-drivers \
          mingw-w64 \
          wine \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpg123-dev \
          libopenal-dev

    - name: 安装32位依赖
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install -y \
          libx11-dev:i386 \
          libxext-dev:i386 \
          libxi-dev:i386 \
          libxrandr-dev:i386 \
          libxcursor-dev:i386 \
          libxcomposite-dev:i386 \
          libxdamage-dev:i386 \
          libxfixes-dev:i386 \
          libxxf86vm-dev:i386 \
          libxrender-dev:i386 \
          libxinerama-dev:i386 \
          libgl-dev:i386 \
          libglu-dev:i386 \
          libosmesa6-dev:i386 \
          libfreetype6-dev:i386 \
          libfontconfig1-dev:i386 \
          libdbus-1-dev:i386 \
          libasound2-dev:i386 \
          libpulse-dev:i386 \
          libudev-dev:i386 \
          libcups2-dev:i386 \
          libjpeg-dev:i386 \
          libpng-dev:i386 \
          libtiff-dev:i386 \
          libxml2-dev:i386 \
          libvulkan-dev:i386 \
          libgstreamer1.0-dev:i386 \
          libgstreamer-plugins-base1.0-dev:i386 \
          libmpg123-dev:i386 \
          libopenal-dev:i386

    - name: 构建 Exp WOW64 版本
      run: |
        set -e
        
        echo "开始构建 Exp WOW64 版本（启用 GStreamer、MPG123、OpenAL）..."
        
        # 清理并创建构建目录
        rm -rf $BUILD_DIR
        mkdir -p $BUILD_DIR
        cd $BUILD_DIR
        
        # 克隆 Wine 源码
        git clone https://gitlab.winehq.org/wine/wine.git
        cd wine
        
        # 使用稳定版本
        git checkout wine-9.7
        
        # 克隆并应用 Staging 补丁
        git clone https://github.com/wine-staging/wine-staging
        cd wine-staging
        ./patches/patchinstall.sh DESTDIR=../wine --all
        cd ../wine
        
        # 修复 Termux 路径问题
        echo "修复 Termux 路径问题..."
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 配置 Wine（启用 GStreamer、MPG123、OpenAL）
        mkdir -p build64
        cd build64
        
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install-exp \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-mpg123 \
          --with-openal \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland
        
        # 构建并安装
        make -j$(nproc)
        make install
        
        cd ../..
        
        # 获取版本信息
        VERSION_EXP=$(cd wine && git describe --tags --abbrev=0)
        echo "VERSION_EXP=$VERSION_EXP" >> $GITHUB_ENV
        
        # 打包
        tar -czf wine-exp-wow64-$VERSION_EXP.tar.gz -C /tmp/wine-install-exp .
        
        echo "Exp WOW64 构建完成: wine-exp-wow64-$VERSION_EXP.tar.gz"

    - name: 构建 Proton WOW64 版本
      run: |
        set -e
        
        echo "开始构建 Proton WOW64 版本（启用 GStreamer、MPG123、OpenAL）..."
        
        # 清理并创建构建目录
        rm -rf $BUILD_DIR/proton
        mkdir -p $BUILD_DIR/proton
        cd $BUILD_DIR/proton
        
        # 克隆 Proton 源码
        git clone https://github.com/ValveSoftware/wine -b proton_10.0
        
        # 修复 Termux 路径问题
        echo "修复 Termux 路径问题..."
        cd wine
        find . -type f \( -name "*.c" -o -name "*.h" -o -name "*.in" -o -name "*.spec" \) -exec grep -l "/tmp" {} \; | xargs sed -i 's|/tmp/|/data/data/com.termux/files/usr/tmp/|g'
        find server -type f \( -name "*.c" -o -name "*.h" \) -exec sed -i 's|"/tmp"|"/data/data/com.termux/files/usr/tmp"|g' {} +
        
        # 配置 Wine（启用 GStreamer、MPG123、OpenAL）
        mkdir -p build64
        cd build64
        
        ../configure \
          --enable-win64 \
          --enable-archs=i386,x86_64 \
          --prefix=/tmp/wine-install-proton \
          --with-x \
          --with-vulkan \
          --with-alsa \
          --with-pulse \
          --with-cups \
          --with-freetype \
          --with-fontconfig \
          --with-gstreamer \
          --with-mpg123 \
          --with-openal \
          --without-dbus \
          --without-sane \
          --without-pcap \
          --without-pcsclite \
          --disable-winemenubuilder \
          --disable-win16 \
          --disable-tests \
          --without-capi \
          --without-coreaudio \
          --without-gphoto \
          --without-osmesa \
          --without-oss \
          --without-udev \
          --without-unwind \
          --without-usb \
          --without-v4l2 \
          --without-wayland
        
        # 构建并安装
        make -j$(nproc)
        make install
        
        cd ../..
        
        # 获取版本信息
        VERSION_PROTON=$(cd wine && git describe --tags --abbrev=0)
        COMMIT_HASH=$(cd wine && git rev-parse --short HEAD)
        echo "VERSION_PROTON=${VERSION_PROTON}-${COMMIT_HASH}" >> $GITHUB_ENV
        
        # 打包
        tar -czf wine-proton-wow64-${VERSION_PROTON}-${COMMIT_HASH}.tar.gz -C /tmp/wine-install-proton .
        
        echo "Proton WOW64 构建完成: wine-proton-wow64-${VERSION_PROTON}-${COMMIT_HASH}.tar.gz"

    - name: 为 Termux 准备安装包
      run: |
        # 使用 Exp WOW64 作为 Termux 包的基础
        EXP_FILE=$(ls wine-exp-wow64-*.tar.gz | head -1)
        echo "使用构建文件: $EXP_FILE"
        
        # 解压构建文件到临时目录
        mkdir -p /tmp/wine-termux
        tar -xzf "$EXP_FILE" -C /tmp/wine-termux
        
        # 创建 Termux 包结构
        mkdir -p wine-package/opt/wine
        mkdir -p wine-package/bin
        
        # 复制 Wine 文件
        cp -r /tmp/wine-termux/* wine-package/opt/wine/
        
        # 创建包装脚本
        cat > wine-package/bin/wine << 'EOF'
        #!/bin/bash
        # Wine for Termux 启动脚本
        
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export HOME="$HOME"
        
        # 设置临时目录
        export TMPDIR="$TERMUX_PREFIX/tmp"
        export TEMP="$TMPDIR"
        export TMP="$TMPDIR"
        
        # 确保临时目录存在
        mkdir -p "$TMPDIR" 2>/dev/null
        
        # 设置 Wine 前缀
        if [ -z "$WINEPREFIX" ]; then
            export WINEPREFIX="$HOME/.wine"
        fi
        
        # 确保 Wine 前缀目录存在
        mkdir -p "$WINEPREFIX" 2>/dev/null
        
        # 设置库路径
        export LD_LIBRARY_PATH="$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib:$LD_LIBRARY_PATH"
        
        # 设置 Vulkan 驱动路径
        export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"
        
        # 设置字体路径
        export FONTCONFIG_PATH="$TERMUX_PREFIX/opt/wine/etc/fonts"
        
        # 设置其他 Wine 相关环境变量
        export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
        export WINEARCH="win64"  # WOW64 模式
        
        # 设置中文环境
        export LANG="zh_CN.UTF-8"
        export LC_ALL="zh_CN.UTF-8"
        export LC_CTYPE="zh_CN.UTF-8"
        
        # 运行真正的 wine 程序
        exec "$TERMUX_PREFIX/opt/wine/bin/wine" "$@"
        EOF
        
        chmod +x wine-package/bin/wine
        
        # 创建其他包装脚本
        for bin in wineserver winecfg; do
          cat > wine-package/bin/$bin << EOF
        #!/bin/bash
        export TERMUX_PREFIX="/data/data/com.termux/files/usr"
        export TMPDIR="\$TERMUX_PREFIX/tmp"
        export LD_LIBRARY_PATH="\$TERMUX_PREFIX/opt/wine/lib:\$TERMUX_PREFIX/opt/wine/lib64:\$TERMUX_PREFIX/lib:\$LD_LIBRARY_PATH"
        export WINEDLLPATH="\$TERMUX_PREFIX/opt/wine/lib/wine:\$TERMUX_PREFIX/opt/wine/lib64/wine"
        export LANG="zh_CN.UTF-8"
        exec "\$TERMUX_PREFIX/opt/wine/bin/$bin" "\$@"
        EOF
          chmod +x wine-package/bin/$bin
        done

    - name: 创建安装脚本和配置
      run: |
        # 创建安装脚本
        cat > wine-package/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "=========================================="
        echo "   Wine WOW64 for Termux 安装脚本"
        echo "=========================================="
        
        TERMUX_PREFIX="/data/data/com.termux/files/usr"
        INSTALL_DIR="$TERMUX_PREFIX/opt/wine"
        BIN_DIR="$TERMUX_PREFIX/bin"
        
        # 检查环境
        if [ ! -d "$TERMUX_PREFIX" ]; then
            echo "错误: 这似乎不是 Termux 环境!"
            exit 1
        fi
        
        # 创建目录
        echo "创建目录..."
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$BIN_DIR"
        mkdir -p "$TERMUX_PREFIX/tmp"
        mkdir -p "$TERMUX_PREFIX/share/vulkan/icd.d"
        mkdir -p "$HOME/.wine"
        
        # 安装文件
        echo "安装 Wine 文件..."
        cp -r opt/wine/* "$INSTALL_DIR"/
        
        echo "安装启动脚本..."
        cp bin/wine "$BIN_DIR"/
        cp bin/wineserver "$BIN_DIR"/
        cp bin/winecfg "$BIN_DIR"/
        
        chmod +x "$BIN_DIR"/wine
        chmod +x "$BIN_DIR"/wineserver
        chmod +x "$BIN_DIR"/winecfg
        
        # 创建 Vulkan ICD 配置
        cat > "$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json" << 'EOL'
        {
            "file_format_version": "1.0.0",
            "ICD": {
                "library_path": "libvulkan_freedreno.so",
                "api_version": "1.0.0"
            }
        }
        EOL
        
        # 配置环境
        echo "配置环境变量..."
        
        if ! grep -q "Wine WOW64 for Termux" "$HOME/.bashrc" 2>/dev/null; then
            cat >> "$HOME/.bashrc" << 'EOL'

            export TERMUX_PREFIX="/data/data/com.termux/files/usr"
            export WINEPREFIX="$HOME/.wine"
            export WINEARCH="win64"
            export PATH="$PATH:$TERMUX_PREFIX/opt/wine/bin"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$TERMUX_PREFIX/opt/wine/lib:$TERMUX_PREFIX/opt/wine/lib64:$TERMUX_PREFIX/lib"
            export WINEDLLPATH="$TERMUX_PREFIX/opt/wine/lib/wine:$TERMUX_PREFIX/opt/wine/lib64/wine"
            export TMPDIR="$TERMUX_PREFIX/tmp"
            export TEMP="$TMPDIR"
            export TMP="$TMPDIR"
            export LANG="zh_CN.UTF-8"
            export LC_ALL="zh_CN.UTF-8"

            # Vulkan 配置
            export VK_ICD_FILENAMES="$TERMUX_PREFIX/share/vulkan/icd.d/freedreno_icd.aarch64.json"
            # ==========================================
            EOL
        fi
        
        echo ""
        echo "=========================================="
        echo "   Wine WOW64 安装完成!"
        echo "=========================================="
        echo ""
        echo "特性:"
        echo "✓ WOW64 架构 (同时支持 32/64 位应用)"
        echo "✓ Vulkan 图形 API 支持"
        echo "✓ GStreamer 多媒体支持"
        echo "✓ MPG123 音频支持"
        echo "✓ OpenAL 3D 音频支持"
        echo "✓ 中文环境支持"
        echo ""
        echo "下一步:"
        echo "1. 重新启动 Termux 或运行: source ~/.bashrc"
        echo "2. 初始化 Wine: wine wineboot"
        echo "3. 配置 Wine: winecfg"
        echo ""
        echo "Vulkan 支持:"
        echo "- 确保安装了 Mesa Vulkan 驱动: pkg install mesa-vulkan-driver"
        echo "- 检查设备 Vulkan 支持"
        echo ""
        echo "音频支持:"
        echo "- 确保安装了音频相关包: pkg install pulseaudio openal mpg123"
        echo ""
        echo "故障排除:"
        echo "- 确保 Termux 有存储权限"
        echo "- 运行: termux-setup-storage"
        echo "- 检查 Wine 前缀: echo \$WINEPREFIX"
        echo "=========================================="
        EOF
        
        chmod +x wine-package/install.sh

    - name: 创建打包文件
      run: |
        # 获取版本信息
        EXP_FILE=$(ls wine-exp-wow64-*.tar.gz | head -1)
        EXP_VERSION=$(echo "$EXP_FILE" | sed 's/wine-exp-wow64-//' | sed 's/.tar.gz//')
        
        PROTON_FILE=$(ls wine-proton-wow64-*.tar.gz | head -1)
        PROTON_VERSION=$(echo "$PROTON_FILE" | sed 's/wine-proton-wow64-//' | sed 's/.tar.gz//')
        
        echo "EXP_VERSION=$EXP_VERSION" >> $GITHUB_ENV
        echo "PROTON_VERSION=$PROTON_VERSION" >> $GITHUB_ENV
        
        # 打包 Termux 版本
        tar -czf wine-wow64-termux-$EXP_VERSION.tar.gz wine-package/
        
        echo "打包完成:"
        ls -lh *.tar.gz

    - name: 上传所有构建产物
      uses: actions/upload-artifact@v4
      with:
        name: wine-wow64-builds
        path: |
          wine-*.tar.gz
        retention-days: 7

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: wow64-$(date +%Y%m%d)
        name: Wine WOW64 Builds
        files: |
          wine-*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息和使用说明
      run: |
        echo "✅ Wine WOW64 构建完成"
        echo ""
        echo "构建的版本:"
        echo "- Exp WOW64: $EXP_VERSION"
        echo "- Proton WOW64: $PROTON_VERSION"
        echo "- Termux 安装包: wine-wow64-termux-$EXP_VERSION.tar.gz"
        echo ""
        echo "启用的功能:"
        echo "✓ GStreamer 多媒体支持"
        echo "✓ MPG123 音频支持" 
        echo "✓ OpenAL 3D 音频支持"
        echo "✓ Vulkan 图形 API 支持"
        echo "✓ 中文环境支持"
        echo ""
        echo "文件说明:"
        echo "wine-exp-wow64-*.tar.gz - Exp WOW64 原始构建文件"
        echo "wine-proton-wow64-*.tar.gz - Proton WOW64 原始构建文件" 
        echo "wine-wow64-termux-*.tar.gz - Termux 专用安装包"
        echo ""
        echo "使用说明:"
        echo "1. 下载 wine-wow64-termux-$EXP_VERSION.tar.gz"
        echo "2. 解压: tar -xzf wine-wow64-termux-$EXP_VERSION.tar.gz"
        echo "3. 进入目录: cd wine-package"
        echo "4. 运行安装: ./install.sh"
        echo "5. 重新加载环境: source ~/.bashrc"
        echo "6. 初始化: wine wineboot"
        echo ""
        echo "音频支持安装:"
        echo "pkg install pulseaudio openal mpg123"
        echo ""
        echo "注意:"
        echo "- 这是真正的 WOW64 构建，单一二进制支持 32/64 位应用"
        echo "- 包含完整的多媒体和音频支持"
        echo "- 已修复 Termux 路径问题"
