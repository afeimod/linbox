# build-mesa.yml
name: Build Mesa (aarch64)

on:
  workflow_dispatch:
    inputs:
      mesa_version:
        description: 'Mesa 版本 (分支、标签或提交哈希)'
        required: true
        default: 'main'
        type: string
      mesa_branch:
        description: 'Mesa 分支 (可选，用于特定分支构建)'
        required: false
        default: ''
        type: string

permissions:
  contents: write  # 允许 GITHUB_TOKEN 创建 Release

jobs:
  build:
    runs-on: ubuntu-24.04-arm

    steps:
    - name: 设置 Mesa 版本
      id: set_version
      run: |
        # 设置 Mesa 版本
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "MESA_VERSION=${{ github.event.inputs.mesa_version }}" >> $GITHUB_ENV
          echo "MESA_BRANCH=${{ github.event.inputs.mesa_branch }}" >> $GITHUB_ENV
        else
          # 默认版本
          echo "MESA_VERSION=main" >> $GITHUB_ENV
          echo "MESA_BRANCH=" >> $GITHUB_ENV
        fi
        
        # 设置构建信息
        BUILD_DATE=$(date +%Y%m%d)
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        
        echo "使用的 Mesa 版本: $MESA_VERSION"
        echo "使用的 Mesa 分支: $MESA_BRANCH"
        echo "构建日期: $BUILD_DATE"

    - name: 检出源码
      uses: actions/checkout@v4

    - name: 安装依赖
      run: |
        sudo sed -i "s/^Types: deb$/Types: deb deb-src/" /etc/apt/sources.list.d/ubuntu.sources
        sudo apt update
        sudo apt-get build-dep mesa -y
        # 额外安装构建工具
        sudo apt install -y meson ninja-build pkg-config python3-pip

    - name: 克隆并准备 Mesa 源码
      run: |
        # 克隆 Mesa 仓库
        git clone https://gitlab.freedesktop.org/mesa/mesa.git
        cd mesa
        
        # 只有当版本不是 main 或指定了分支时才进行 checkout
        if [ "$MESA_VERSION" != "main" ] || [ -n "$MESA_BRANCH" ]; then
          # 如果指定了分支，先切换到分支
          if [ -n "$MESA_BRANCH" ]; then
            echo "切换到分支: $MESA_BRANCH"
            git checkout mesa-$MESA_BRANCH
            # 拉取最新更改
            git pull origin mesa-$MESA_BRANCH
          fi
          
          # 如果版本不是 main，检出版本
          if [ "$MESA_VERSION" != "main" ]; then
            echo "正在检出 Mesa 版本: $MESA_VERSION"
            git checkout mesa-$MESA_VERSION
          fi
        else
          echo "使用默认的 main 分支源码，不进行额外 checkout"
        fi
        
        # 获取详细的版本信息
        MESA_COMMIT_HASH=$(git rev-parse --short HEAD)
        MESA_DESCRIBE=$(git describe --tags --always 2>/dev/null || echo "custom-$MESA_COMMIT_HASH")
        MESA_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
        
        echo "MESA_COMMIT_HASH=$MESA_COMMIT_HASH" >> $GITHUB_ENV
        echo "MESA_DESCRIBE=$MESA_DESCRIBE" >> $GITHUB_ENV
        echo "MESA_TAG=$MESA_TAG" >> $GITHUB_ENV
        
        # 尝试从 VERSION 文件获取版本号
        if [ -f "VERSION" ]; then
          OFFICIAL_VERSION=$(cat VERSION)
          echo "OFFICIAL_VERSION=$OFFICIAL_VERSION" >> $GITHUB_ENV
        else
          echo "OFFICIAL_VERSION=$MESA_DESCRIBE" >> $GITHUB_ENV
        fi
        
        echo "Mesa 提交哈希: $MESA_COMMIT_HASH"
        echo "Mesa 描述: $MESA_DESCRIBE"
        echo "Mesa 标签: $MESA_TAG"
        echo "官方版本: $OFFICIAL_VERSION"

    - name: 构建 Mesa
      run: |
        cd mesa
        sudo mkdir -p /data/data/com.termux/files/usr/glibc
        sudo chmod 777 -R /data

        mkdir -p builddir
        meson setup builddir \
          --libdir=lib \
          -Dprefix=/data/data/com.termux/files/usr/glibc \
          -Dbuildtype=release \
          -Doptimization=3 \
          -Db_lto=true \
          -Dplatforms=x11 \
          -Degl-native-platform=x11 \
          -Dglx=dri \
          -Dglx-direct=true \
          -Dopengl=true \
          -Dgles1=enabled \
          -Dgles2=enabled \
          -Dglvnd=disabled \
          -Degl=enabled \
          -Dllvm=disabled \
          -Dshared-llvm=disabled \
          -Dshader-cache=enabled \
          -Dxlib-lease=enabled \
          -Dvulkan-beta=true \
          -Dgallium-drivers=zink,freedreno \
          -Dvulkan-drivers=freedreno \
          -Dfreedreno-kmds=msm,kgsl \
          -Dvideo-codecs=all \
          -Dgbm=enabled \
          -Dtools=drm-shim,freedreno

        ninja -C builddir
        ninja -C builddir install

        # 创建版本信息文件
        cat > /data/data/com.termux/files/usr/glibc/mesa-build-info.txt << EOF
            Mesa Build Information
            ======================
            Version: $OFFICIAL_VERSION
            Git Describe: $MESA_DESCRIBE
            Commit Hash: $MESA_COMMIT_HASH
            Build Date: $BUILD_DATE
            Build Type: Release (Optimized)
            Target: aarch64 Termux glibc
            Gallium Drivers: zink,freedreno
            Vulkan Drivers: freedreno
        EOF

    - name: 创建发布包
      run: |
        # 创建打包目录
        mkdir -p mesa-package/opt/mesa
        cp -r /data/data/com.termux/files/usr/glibc/* mesa-package/opt/mesa/
        
        # 创建安装脚本
        cat > mesa-package/install-mesa.sh << 'EOF'
            #!/bin/bash
            echo "Installing Mesa for Termux glibc..."
            echo "This will copy Mesa libraries to /data/data/com.termux/files/usr/glibc"

            # 检查目标目录
            TARGET_DIR="/data/data/com.termux/files/usr/glibc"
            if [ ! -d "$TARGET_DIR" ]; then
                echo "Error: Termux glibc directory not found: $TARGET_DIR"
                echo "Please make sure you have glibc installed in Termux"
                exit 1
            fi

            # 备份原有文件
            BACKUP_DIR="/data/data/com.termux/files/usr/glibc-backup-$(date +%Y%m%d-%H%M%S)"
            echo "Backing up existing Mesa files to: $BACKUP_DIR"
            mkdir -p "$BACKUP_DIR"
            cp -r "$TARGET_DIR/lib/"* "$BACKUP_DIR/" 2>/dev/null || true

            # 安装新的 Mesa 文件
            echo "Installing new Mesa files..."
            cp -r ./opt/mesa/* "$TARGET_DIR/"

            echo "Mesa installation completed!"
            echo "Backup created at: $BACKUP_DIR"
            echo "Build info:"
            cat "$TARGET_DIR/mesa-build-info.txt"
        EOF

        chmod +x mesa-package/install-mesa.sh

        # 打包
        tar -czf mesa-${OFFICIAL_VERSION}-${BUILD_DATE}-aarch64-termux-glibc.tar.gz mesa-package/
        echo "打包完成:"
        ls -lh mesa-*.tar.gz

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: mesa-${{ env.OFFICIAL_VERSION }}-${{ env.BUILD_DATE }}-aarch64-termux-glibc
        path: mesa-${{ env.OFFICIAL_VERSION }}-${{ env.BUILD_DATE }}-aarch64-termux-glibc.tar.gz

    - name: 创建发布标签
      id: create_tag
      run: |
        # 创建有意义的发布标签
        if [ -n "$MESA_TAG" ]; then
          RELEASE_TAG="$MESA_TAG-termux"
        else
          RELEASE_TAG="mesa-$OFFICIAL_VERSION-$BUILD_DATE-termux"
        fi
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        echo "Release 标签: $RELEASE_TAG"

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Mesa ${{ env.OFFICIAL_VERSION }} (aarch64, Termux glibc)
        body: |
          Mesa 3D Graphics Library for Termux glibc
          
          构建信息:
          - **版本**: ${{ env.OFFICIAL_VERSION }}
          - **Git 描述**: ${{ env.MESA_DESCRIBE }}
          - **提交哈希**: ${{ env.MESA_COMMIT_HASH }}
          - **构建日期**: ${{ env.BUILD_DATE }}
          - **目标架构**: aarch64
          - **环境**: Termux glibc
          
          驱动支持:
          - ✅ Gallium Drivers: zink, freedreno
          - ✅ Vulkan Drivers: freedreno
          - ✅ OpenGL, OpenGL ES 1.x, OpenGL ES 2.x
          - ✅ EGL, GBM
          
          配置特性:
          - ✅ 发布构建 (优化级别 3)
          - ✅ LTO 链接时优化
          - ✅ Shader Cache 支持
          - ✅ X11 平台支持
          
          安装说明:
          1. 解压下载的 tar.gz 文件
          2. 运行安装脚本: `./install-mesa.sh`
          3. 脚本会自动备份现有文件并安装新的 Mesa
          
          注意: 需要已安装 Termux glibc 环境。
        files: mesa-${{ env.OFFICIAL_VERSION }}-${{ env.BUILD_DATE }}-aarch64-termux-glibc.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出版本信息
      run: |
        echo "✅ Mesa 构建完成"
        echo "版本号: $OFFICIAL_VERSION"
        echo "Git 描述: $MESA_DESCRIBE"
        echo "提交哈希: $MESA_COMMIT_HASH"
        echo "构建日期: $BUILD_DATE"
        echo "发布标签: $RELEASE_TAG"
        echo "目标架构: aarch64"
        echo "环境: Termux glibc"
        echo "驱动支持:"
        echo "✓ Gallium: zink, freedreno"
        echo "✓ Vulkan: freedreno"
        echo "✓ OpenGL, OpenGL ES 1.x/2.x"
        echo "✓ EGL, GBM"